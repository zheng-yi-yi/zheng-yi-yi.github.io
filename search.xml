<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【设计模式】类间关系</title>
      <link href="/2024/01/19/dp-01-class-relationships/"/>
      <url>/2024/01/19/dp-01-class-relationships/</url>
      
        <content type="html"><![CDATA[<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><img src="/2024/01/19/dp-01-class-relationships/UML.png" class="" title="UML"><p>类图是一种软件工程中的<strong>统一建模语言（UML）</strong>的静态结构图，用于描述系统的类集合、类的属性和类之间的关系。它主要用于概念建模，将系统的模型转化为代码。</p><p>类图的主要元素包括：</p><ol><li><strong>类的三个区域：</strong><ul><li>最上面是<strong>类的名称</strong>。</li><li>中间部分包含类的属性（字段）。</li><li>底部部分包含类的操作（方法）。</li></ul></li><li><strong>成员可见性：</strong><ul><li><code>+</code> 表示公共（public）成员。</li><li><code>-</code> 表示私有（private）成员。</li><li><code>#</code> 表示保护（protected）成员。</li><li><code>~</code> 表示包（package）成员，即对包内其他成员可见。</li></ul></li><li><strong>类图可进一步结合状态图或UML状态机来描述系统的行为。</strong></li></ol><p>类图是一种强大的工具，通过图形化的方式展示了系统中的类、它们之间的关系以及类的内部结构，帮助我们更好地理解和设计软件系统。</p><h1 id="类间关系"><a href="#类间关系" class="headerlink" title="类间关系"></a>类间关系</h1><p>类之间的关系指的是在面向对象编程中，不同类之间可能存在的连接和依赖关系。这些关系描述了类之间的交互方式和相互影响。</p><img src="/2024/01/19/dp-01-class-relationships/Uml_classes.png" class="" title="Uml_classes"><p>类之间的关系主要分为以下六种：</p><ol><li><p><strong>依赖关系（Dependency）</strong>：一个类的实现依赖于另一个类的定义，但两者并没有强耦合。一个类的变化不会影响另一个类的实现，只是依赖关系较弱的一种关系。</p></li><li><p><strong>关联关系（Association）</strong>：两个类之间有一定的关联，表示一个类知道另一个类的存在。关联关系可以是单向的或双向的。关联关系比依赖关系更强，两者之间有更紧密的联系。</p></li><li><p><strong>聚合关系（Aggregation）</strong>：表示整体与部分之间的关系，是一种强于关联关系的关系。聚合关系中，整体和部分可以分开存在。例如，一个班级包含多个学生，但学生可以存在于其他班级。</p></li><li><p><strong>组合关系（Composition）</strong>：也表示整体与部分之间的关系，但是组合关系中整体和部分之间具有更强的耦合。整体和部分的生命周期是相互依赖的，部分不能脱离整体而存在。例如，一个汽车包含引擎和轮胎，它们之间是组合关系。</p></li><li><p><strong>泛化关系（Generalization）</strong>：即继承的反方向，指的是一个类（称为父类、父接口）具有另外的一个（或一些）类（称为子类、子接口）的共有功能。子类可视为其父类的特例，并可以增加新功能。</p></li><li><p><strong>实现关系（Realization）</strong>：表示类与接口之间的关系，一个类实现了一个接口，必须实现接口中定义的所有方法。</p></li></ol><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>依赖关系是一种比较松散的关系，表示一个类依赖于另一个类的定义，但两者之间的耦合度相对较低。在依赖关系中，一个类的变化不会直接影响到另一个类的实现。</p><p>你可以这么理解，<strong>一个类只要用（using）到了另一个类，那么它们之间就存在依赖关系</strong>。依赖关系仅仅描述了类与类之间的一种使用与被使用的关系。</p><p>比如现在有一个<code>Driver</code>类和一个<code>Car</code>类，<code>Driver</code>类依赖于<code>Car</code>类来实现其功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123; <span class="comment">// 汽车类</span></span><br><span class="line"><span class="keyword">private</span> String brand;  <span class="comment">//品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String brand)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(brand+<span class="string">&quot;汽车在行驶...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span> &#123;  <span class="comment">//驾驶员类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(Car car)</span> &#123;  <span class="comment">//方法参数类型为Car；Driver依赖 Car</span></span><br><span class="line">car.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DriverAndCar</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Driver</span>().drive(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奥迪&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>Car</code>（汽车）和<code>Driver</code>（驾驶员）之间存在依赖关系。</p><p><code>Driver</code>类有一个<code>drive</code>方法，该方法的参数类型是<code>Car</code>，表明驾驶员依赖于汽车对象。在主类<code>DriverAndCar</code>的<code>main</code>方法中，创建了一个<code>Driver</code>对象并调用其<code>drive</code>方法，传入一个<code>Car</code>对象（奥迪），从而实现了驾驶员驾驶汽车的过程。</p><p><strong>在<code>UML</code>类图中，依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方</strong>。</p><img src="/2024/01/19/dp-01-class-relationships/Car-Driver.png" class="" title="Car-Driver"><blockquote><p>依赖关系的存在使得类与类之间的耦合度相对较低，有利于代码的灵活性和可维护性。</p></blockquote><h1 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h1><p>关联关系，表示一类对象与另一类对象之间有联系的一种结构化关系。它反映了整体与部分之间的关系，通常表现为一个类（或接口）类型的对象作为另一个类的属性（字段）。</p><p>关联关系可以分为单向关联和双向关联。</p><ul><li><p><strong>单向关联：</strong> 一个类的对象作为另一个类的属性，表示一种单向的拥有关系。例如，Customer与Address的关系，表示顾客拥有快递地址。</p></li><li><p><strong>双向关联：</strong> 两个类的对象互为属性，表示双向的关系。例如，Employee与Department的关系，表示员工与部门之间存在双向关联。</p></li></ul><p>关联关系可细分为聚合和组合两种使用方式：</p><ul><li><p><strong>聚合（Aggregation）：</strong> 部分类对象可以独立存在于整体类对象之外，关系较为松散。例如，Company与Employee的关系，表示公司包含员工，但员工可以独立存在。</p></li><li><p><strong>组合（Composition）：</strong> 部分类对象与整体类对象具有统一的生存期，整体类对象的生命周期控制部分类对象。例如，Head与Mouth的关系，表示头部包含口，口的生命周期与头的生命周期相关联。</p></li></ul><p>此外，关联关系中还可能存在<strong>自关联</strong>，即一个类的属性对象类型为该类本身，例如单链表中的结点类。</p><p>在UML类图中，<strong>关联关系用实线连接有关联的两个类</strong>。单向关联用一个带箭头的实线表示，箭头从使用类指向被关联的类，双向关联用带箭头或者没有箭头的实线来表示。</p><img src="/2024/01/19/dp-01-class-relationships/Teacher-Student.png" class="" title="Teacher-Student"><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>聚合（Aggregation）是一种表示整体与部分的一类特殊的关联关系，可以理解为一种“… owns a …”（拥有）关系。</p><p> 聚合关系是一种弱关联，部分对象可以独立存在，不依赖于整体对象。它们可以具有各自的生命周期。比如图书馆包含(owns a) 学生和书籍（即使没有图书馆，学生也可以存在）。再比如老师和课程之间的关系也是聚合。一个教授可以教授多门课程，而每门课程又可以由不同的教授来教，并且各自的生命周期可以独立存在。</p><p>在代码实现时，类对象通过构造器或<code>setter</code>方法进行注入。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123; <span class="comment">// 部分类</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span> &#123;   <span class="comment">//整体类</span></span><br><span class="line"><span class="keyword">private</span> String companyName;</span><br><span class="line"><span class="keyword">private</span> List&lt;Employee&gt; employees;  <span class="comment">//Company聚合Employee</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Company</span><span class="params">(String companyName)</span> &#123;  <span class="comment">//构造方法</span></span><br><span class="line"><span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCompanyName</span><span class="params">()</span> &#123;  <span class="comment">//getter</span></span><br><span class="line"><span class="keyword">return</span> companyName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmployees</span><span class="params">(List&lt;Employee&gt; employees)</span> &#123;  <span class="comment">//setter</span></span><br><span class="line"><span class="built_in">this</span>.employees = employees;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getEmployees</span><span class="params">()</span> &#123;  <span class="comment">//getter</span></span><br><span class="line"><span class="keyword">return</span> employees;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><p><strong>Company类（整体类）：</strong> 代表了整体，即公司。它有一个属性是<code>employees</code>，用于存储雇佣的员工列表。</p></li><li><p><strong>Employee类（部分类）：</strong> 代表了部分，即员工。员工有一个属性<code>name</code>表示姓名。</p></li></ul><p>通过这个设计，公司（整体类）可以包含多个员工（部分类），而员工可以独立存在，不依赖于任何特定的公司（公司关了，员工也不会消失）。这符合聚合关系的特性，即<strong>部分类对象可以脱离整体类对象而独立存在</strong>。</p><p>类图如下：</p><img src="/2024/01/19/dp-01-class-relationships/aggregation.png" class="" title="aggregation"><p>聚合关系表示为<strong>一条实线，在关联端带有一个未填充的菱形</strong>，该实线连接到表示聚合的类。</p><h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><p>组合（Composition）关系是一类“强”的整体与部分的包含关系（” … is a part of …”），部分类对象与整体类对象具有统一的生存期。当整体类对象消亡时，部分类对象也将消亡。或者说，整体类对象控制了部分类对象的生命周期。</p><p>整体对象完全负责创建、销毁和管理部分类对象。部分类对象无法独立存在或被其他对象所拥有。在代码实现时，<strong>部分类对象在整体类属性声明时或它的构造方法里实例化</strong>。</p><p>举例：</p><p>公司与公司部门之间的关系可以被视为组合关系。一个公司包含多个部门，而且公司的存在决定了部门的存在，整体对象（公司）管理部分对象（部门），整体对象的销毁将导致部分对象的销毁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Department&gt; departments;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Company</span><span class="params">(String companyName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.companyName = companyName;</span><br><span class="line">        <span class="built_in">this</span>.departments = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompanyName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> companyName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDepartment</span><span class="params">(Department department)</span> &#123;</span><br><span class="line">        departments.add(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Department&gt; <span class="title function_">getDepartments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他公司相关的方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeCompany</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 公司关闭时，销毁所有部门</span></span><br><span class="line">        <span class="keyword">for</span> (Department department : departments) &#123;</span><br><span class="line">            department.closeDepartment();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Company &quot;</span> + companyName + <span class="string">&quot; is closed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Department</span><span class="params">(String departmentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.departmentName = departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDepartmentName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> departmentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部门相关的方法...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeDepartment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 部门关闭时的清理操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Department &quot;</span> + departmentName + <span class="string">&quot; is closed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类图如下：</p><img src="/2024/01/19/dp-01-class-relationships/composition.png" class="" title="composition"><p>在类图中，组合关系通常用<strong>实心的菱形箭尾和实线</strong>表示，箭头指向整体对象。</p><h1 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h1><p>泛化（Generalization）关系指的是<strong>一个类（称为父类、父接口）具有另外的一个（或一些）类（称为子类、子接口）的共有功能</strong>。实际上就是类（或接口）之间的继承关系。</p><p>子类继承了父类的属性和方法，可以视为是父类的特例，同时具有扩展或增加新功能的能力。通过泛化，可以将通用的行为和属性提取到父类中，从而提高代码的复用性和可维护性。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is barking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">meow</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is meowing.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Dog</code>和<code>Cat</code>类继承自<code>Animal</code>类，形成了泛化关系。<code>Animal</code>类包含了共有的<code>eat</code>方法，而<code>Dog</code>和<code>Cat</code>类分别增加了独有的功能。</p><img src="/2024/01/19/dp-01-class-relationships/Generalization.png" class="" title="Generalization"><p>在类图中，泛化关系通常用带空心三角形的箭头和实线表示。箭头指向父类，表示子类继承自父类。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现（Realization）关系很简单，就是指一个<code>class</code>类实现<code>interface</code>接口（可以是多个）。实现类需要实现接口中声明的所有抽象方法。</p><p>在Java中此类关系通过关键字<code>implements</code>明确标识。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;<span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;<span class="comment">//实现接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;船在水上行驶&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;<span class="comment">//实现接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;汽车在公路上行驶&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/01/19/dp-01-class-relationships/Realization.png" class="" title="Realization"><p>在类图中，实现关系用<strong>带空心三角形箭头的虚线</strong>表示。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类之间的关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言基础</title>
      <link href="/2024/01/19/java-01-basis/"/>
      <url>/2024/01/19/java-01-basis/</url>
      
        <content type="html"><![CDATA[<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>标识符是用来命名变量、方法、类等的名称。其中：</p><ol><li><strong>首字符</strong>必须以字母（<code>A-Z</code> 或 <code>a-z</code>）、下划线<code>_</code>或美元符号<code>$</code>开头。</li><li><strong>后续字符</strong>可以是字母、下划线<code>_</code>、美元符号<code>$</code>或数字。</li></ol><p>Java是区分大小写的，即<code>identifier</code>和<code>Identifier</code>被视为不同的标识符。</p><p>不能使用Java的关键字作为标识符。例如，<code>this</code>是关键字，不能用作标识符。</p><p>Java关键字如下：</p><img src="/2024/01/19/java-01-basis/guanjianzi.png" class="" title="guanjianzi"><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>基本数据类型是 <code>Java</code> 语言操作数据的基础，包括 <code>boolean</code>、<code>char</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code> 和 <code>double</code>，共 8 种。</p><p>注意，变量可以分为局部变量、成员变量和静态变量。</p><p>当变量是局部变量时（比如在方法中定义的变量）必须先初始化再使用。否则会报错：<code>The local variable xxx may not have been initialized</code>。</p><p>当变量时成员变量或者静态变量时，可以不进行初始化，此时会有默认值，如下所示：</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">默认值</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center"><code>boolean</code></td><td align="center"><code>false</code></td><td align="center">1 比特</td></tr><tr><td align="center"><code>char</code></td><td align="center"><code>&#39;\u0000&#39;</code></td><td align="center">2 字节</td></tr><tr><td align="center"><code>byte</code></td><td align="center"><code>0</code></td><td align="center">1 字节</td></tr><tr><td align="center"><code>short</code></td><td align="center"><code>0</code></td><td align="center">2 字节</td></tr><tr><td align="center"><code>int</code></td><td align="center"><code>0</code></td><td align="center">4 字节</td></tr><tr><td align="center"><code>long</code></td><td align="center"><code>0L</code></td><td align="center">8 字节</td></tr><tr><td align="center"><code>float</code></td><td align="center"><code>0.0f</code></td><td align="center">4 字节</td></tr><tr><td align="center"><code>double</code></td><td align="center"><code>0.0</code></td><td align="center">8 字节</td></tr></tbody></table><h1 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h1><p>引用数据类型在Java中是一种特殊的数据类型，它们存储的是对象的引用地址，而不是对象本身。</p><ol><li><strong>引用数据类型：</strong> 除了基本数据类型以外的所有类型都属于引用数据类型。这包括数组、类（对象）以及接口。</li><li><strong>内存存储：</strong> 引用数据类型的变量在内存中存储的是一个引用地址，这个地址指向实际对象的内存地址。</li><li><strong>操作对象：</strong> 通过引用，我们可以操作对象，调用对象的方法、访问对象的属性等。</li></ol><h1 id="包装器类型"><a href="#包装器类型" class="headerlink" title="包装器类型"></a>包装器类型</h1><p>包装器类型（Wrapper Types）是Java中一组用于将基本数据类型转换为对象的类。在Java中，基本数据类型（如<code>int</code>、<code>char</code>、<code>boolean</code>等）是不具备对象特性的，但有时候需要在对象上执行操作，这时就需要使用包装器类型。</p><p>每个基本数据类型都有对应的包装器类，它们属于<code>java.lang</code>包。以下是基本数据类型及其对应的包装器类型：</p><ul><li><code>Byte</code>（对应 <code>byte</code>）</li><li><code>Short</code>（对应 <code>short</code>）</li><li><code>Integer</code>（对应 <code>int</code>）</li><li><code>Long</code>（对应 <code>long</code>）</li><li><code>Float</code>（对应 <code>float</code>）</li><li><code>Double</code>（对应 <code>double</code>）</li><li><code>Character</code>（对应 <code>char</code>）</li><li><code>Boolean</code>（对应 <code>boolean</code>）</li></ul><p>这些包装器类型提供了一些额外的功能，例如转换为字符串、解析字符串、比较对象等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （1）转换为字符串</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">intValue</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">stringValue</span> <span class="operator">=</span> intValue.toString(); <span class="comment">// 将Integer对象转换为字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;String value: &quot;</span> + stringValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// （2）解析字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">numberStr</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">parsedValue</span> <span class="operator">=</span> Integer.valueOf(numberStr); <span class="comment">// 将字符串解析为Integer对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;Parsed value: &quot;</span> + parsedValue);</span><br></pre></td></tr></table></figure><p>另外，包装器也用于在集合类（如集合框架中的List、Map等）中存储基本数据类型的值，因为集合类只能存储对象。</p><p>使用包装器类型可以方便地进行对象操作，但在实际编程中，也可以通过自动装箱（Autoboxing）和自动拆箱（Unboxing）来方便地在基本数据类型和包装器类型之间进行转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">42</span>; <span class="comment">// 将int类型自动装箱为Integer对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> num; <span class="comment">// 将Integer对象自动拆箱为int类型</span></span><br></pre></td></tr></table></figure><p>总体而言，包装器类型在Java中用于处理基本数据类型与对象之间的转换和操作，提供了更多的灵活性。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Java的运算符可分为多个类别，包括算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符，以及三元运算符。</p><ol><li><p><strong>算术运算符：</strong></p><ul><li><code>+</code>：加法</li><li><code>-</code>：减法</li><li><code>*</code>：乘法</li><li><code>/</code>：除法</li><li><code>%</code>：取模（求余）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 加法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b; <span class="comment">// 13</span></span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">difference</span> <span class="operator">=</span> a - b; <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 乘法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> a * b; <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 除法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">quotient</span> <span class="operator">=</span> a / b; <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 取模</span></span><br><span class="line"><span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> a % b; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>关系运算符：</strong></p><ul><li><code>==</code>：等于</li><li><code>!=</code>：不等于</li><li><code>&gt;</code>：大于</li><li><code>&lt;</code>：小于</li><li><code>&gt;=</code>：大于等于</li><li><code>&lt;=</code>：小于等于</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> x == y; <span class="comment">// 结果为 false</span></span><br><span class="line"><span class="comment">// 不等于</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isNotEqual</span> <span class="operator">=</span> x != y; <span class="comment">// 结果为 true</span></span><br><span class="line"><span class="comment">// 大于</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isGreaterThan</span> <span class="operator">=</span> x &gt; y; <span class="comment">// 结果为 false</span></span><br><span class="line"><span class="comment">// 小于</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLessThan</span> <span class="operator">=</span> x &lt; y; <span class="comment">// 结果为 true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>逻辑运算符：</strong></p><ul><li><code>&amp;&amp;</code>：逻辑与（AND）</li><li><code>||</code>：逻辑或（OR）</li><li><code>!</code>：逻辑非（NOT）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">condition1</span> <span class="operator">=</span> <span class="literal">true</span>, condition2 = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 逻辑与</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">resultAnd</span> <span class="operator">=</span> condition1 &amp;&amp; condition2; <span class="comment">// 结果为 false</span></span><br><span class="line"><span class="comment">// 逻辑或</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">resultOr</span> <span class="operator">=</span> condition1 || condition2; <span class="comment">// 结果为 true</span></span><br><span class="line"><span class="comment">// 逻辑非</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">resultNot</span> <span class="operator">=</span> !condition1; <span class="comment">// 结果为 false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>位运算符：</strong></p><ul><li><code>&amp;</code>：按位与</li><li><code>|</code>：按位或</li><li><code>^</code>：按位异或</li><li><code>~</code>：按位取反</li><li><code>&lt;&lt;</code>：左移</li><li><code>&gt;&gt;</code>：右移</li><li><code>&gt;&gt;&gt;</code>：无符号右移</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">5</span>, num2 = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 按位与</span></span><br><span class="line"><span class="type">int</span> <span class="variable">bitwiseAnd</span> <span class="operator">=</span> num1 &amp; num2; <span class="comment">// 结果为 1</span></span><br><span class="line"><span class="comment">// 按位或</span></span><br><span class="line"><span class="type">int</span> <span class="variable">bitwiseOr</span> <span class="operator">=</span> num1 | num2; <span class="comment">// 结果为 7</span></span><br><span class="line"><span class="comment">// 按位异或</span></span><br><span class="line"><span class="type">int</span> <span class="variable">bitwiseXor</span> <span class="operator">=</span> num1 ^ num2; <span class="comment">// 结果为 6</span></span><br><span class="line"><span class="comment">// 按位取反</span></span><br><span class="line"><span class="type">int</span> <span class="variable">bitwiseNot</span> <span class="operator">=</span> ~num1; <span class="comment">// 结果为 -6</span></span><br></pre></td></tr></table></figure></li><li><p><strong>赋值运算符：</strong></p><ul><li><code>=</code>：赋值</li><li><code>+=</code>：加法赋值</li><li><code>-=</code>：减法赋值</li><li><code>*=</code>：乘法赋值</li><li><code>/=</code>：除法赋值</li><li><code>%=</code>：取模赋值</li><li><code>&amp;=</code>：按位与赋值</li><li><code>|=</code>：按位或赋值</li><li><code>^=</code>：按位异或赋值</li><li><code>&lt;&lt;=</code>：左移赋值</li><li><code>&gt;&gt;=</code>：右移赋值</li><li><code>&gt;&gt;&gt;=</code>：无符号右移赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">num3 += <span class="number">5</span>; <span class="comment">// 等同于 num3 = num3 + 5;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>三元运算符：</strong></p><ul><li><code>? :</code>：条件运算符，根据条件的真假选择不同的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 条件运算符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> (a &gt; b) ? a : b; <span class="comment">// 结果为 10</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><p>流程控制语句在Java中用于控制程序的执行流程。</p><ol><li><p><strong>简单条件语句（if）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;x 大于 5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>复合条件语句（if…else）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (y % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;y 是偶数&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;y 是奇数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>开关语句（switch）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (dayOfWeek) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 其他情况</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;其他天&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>布尔表达式（三元运算符）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>, b = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> (a &gt; b) ? a : b;</span><br><span class="line">System.out.println(<span class="string">&quot;较大的值是：&quot;</span> + result);</span><br></pre></td></tr></table></figure></li><li><p><strong>循环语句：</strong></p><ul><li><p><strong>for循环:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环次数：&quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>while循环:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环次数：&quot;</span> + (count + <span class="number">1</span>));</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>do…while循环:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环次数：&quot;</span> + num);</span><br><span class="line">    num++;</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt;= <span class="number">4</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>中止循环（break, continue, return）:</strong></p><ul><li><strong>break:</strong> 用于跳出循环。</li><li><strong>continue:</strong> 用于跳过当前循环的剩余代码，继续下一次循环。</li><li><strong>return:</strong> 用于在方法中返回值并中止方法的执行。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 当 i 等于 3 时跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环次数：&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 当 j 等于 3 时跳过当前循环的剩余代码，继续下一次循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环次数：&quot;</span> + j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findNumber</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">// 找到目标值时返回并中止方法的执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 如果未找到目标值，则返回 -1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><p><code>java.lang.Math</code> 类提供了一系列用于数学运算的静态方法和常量。</p><ol><li><p><strong>方法：</strong></p><ul><li><p><strong><code>abs(double d)</code>：</strong> 返回参数 d 的绝对值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">absoluteValue</span> <span class="operator">=</span> Math.abs(-<span class="number">5.67</span>); <span class="comment">// 返回 5.67</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>min(double d1, double d2)</code>：</strong> 返回参数 d1 和 d2 中的小者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">minValue</span> <span class="operator">=</span> Math.min(<span class="number">3.14</span>, <span class="number">2.71</span>); <span class="comment">// 返回 2.71</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>max(double d1, double d2)</code>：</strong> 返回参数 d1 和 d2 中的大者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">maxValue</span> <span class="operator">=</span> Math.max(<span class="number">3.14</span>, <span class="number">2.71</span>); <span class="comment">// 返回 3.14</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>sqrt(double d)</code>：</strong> 返回参数 d 的平方根。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">squareRoot</span> <span class="operator">=</span> Math.sqrt(<span class="number">9</span>); <span class="comment">// 返回 3.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>pow(double d1, double d2)</code>：</strong> 返回 d1 的 d2 次幂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">powerResult</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 返回 8.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>random()</code>：</strong> 返回 [0, 1) 范围内的随机数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">randomValue</span> <span class="operator">=</span> Math.random(); <span class="comment">// 返回 [0, 1) 范围内的随机数</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>常量：</strong></p><ul><li><p><strong><code>PI</code>：</strong> 圆周率 π，类型为 double。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">piValue</span> <span class="operator">=</span> Math.PI; <span class="comment">// 圆周率，约 3.141592653589793</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>E</code>：</strong> 自然对数的底 e，类型为 double。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">eValue</span> <span class="operator">=</span> Math.E; <span class="comment">// 自然对数的底，约 2.718281828459045</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p><code>String</code> 类是 Java 中表示字符串的不可变类，它提供了丰富的方法来处理字符串。由于字符串是不可变的，每次对字符串进行操作都会生成一个新的字符串对象。</p><ol><li><p><strong>创建字符串：</strong></p><ul><li><p>使用字面值创建字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用构造函数创建字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>字符串长度：</strong></p><ul><li>使用 <code>length()</code> 方法获取字符串的长度：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> text.length(); <span class="comment">// 返回 13</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>字符串连接：</strong></p><ul><li>使用 <code>+</code> 运算符或 <code>concat()</code> 方法连接字符串：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> greeting + <span class="string">&quot;, &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="type">String</span> <span class="variable">concatenatedMessage</span> <span class="operator">=</span> greeting.concat(<span class="string">&quot;, &quot;</span>).concat(name).concat(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>提取子串：</strong></p><ul><li>使用 <code>substring(int beginIndex)</code> 或 <code>substring(int beginIndex, int endIndex)</code> 提取子串：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">original</span> <span class="operator">=</span> <span class="string">&quot;Java Programming&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">subString1</span> <span class="operator">=</span> original.substring(<span class="number">5</span>);      <span class="comment">// 返回 &quot;Programming&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">subString2</span> <span class="operator">=</span> original.substring(<span class="number">0</span>, <span class="number">4</span>);  <span class="comment">// 返回 &quot;Java&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>查找字符或子串：</strong></p><ul><li>使用 <code>indexOf(char ch)</code> 或 <code>indexOf(String str)</code> 查找字符或子串的索引：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">indexOfComma</span> <span class="operator">=</span> text.indexOf(<span class="string">&#x27;,&#x27;</span>);           <span class="comment">// 返回 5</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexOfWorld</span> <span class="operator">=</span> text.indexOf(<span class="string">&quot;World&quot;</span>);      <span class="comment">// 返回 7</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>替换字符或子串：</strong></p><ul><li>使用 <code>replace(char oldChar, char newChar)</code> 或 <code>replace(CharSequence target, CharSequence replacement)</code> 替换字符或子串：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">original</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> original.replace(<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);  <span class="comment">// 返回 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>转换大小写：</strong></p><ul><li>使用 <code>toLowerCase()</code> 或 <code>toUpperCase()</code> 转换大小写：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Java Programming&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">lowercase</span> <span class="operator">=</span> text.toLowerCase();  <span class="comment">// 返回 &quot;java programming&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uppercase</span> <span class="operator">=</span> text.toUpperCase();  <span class="comment">// 返回 &quot;JAVA PROGRAMMING&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>去除首尾空白：</strong></p><ul><li>使用 <code>trim()</code> 方法去除字符串首尾的空格：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">paddedText</span> <span class="operator">=</span> <span class="string">&quot;   Trim Me!   &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">trimmedText</span> <span class="operator">=</span> paddedText.trim();  <span class="comment">// 返回 &quot;Trim Me!&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>判断字符串相等：</strong></p><ul><li>使用 <code>equals()</code> 或 <code>equalsIgnoreCase()</code> 方法判断字符串是否相等：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> str1.equals(str2);              <span class="comment">// 返回 false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqualIgnoreCase</span> <span class="operator">=</span> str1.equalsIgnoreCase(str2);  <span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>需要注意的是，由于<strong>字符串是不可变的</strong>，对字符串的任何修改操作返回的都是一个新的字符串对象。</p><h1 id="字符串与其他类型的转换"><a href="#字符串与其他类型的转换" class="headerlink" title="字符串与其他类型的转换"></a>字符串与其他类型的转换</h1><p><strong>字符串和数值之间的转换</strong>：</p><ul><li><p>使用 <code>Integer.parseInt(String str)</code> 将字符串转换为整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strNumber</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> Integer.parseInt(strNumber); <span class="comment">// 结果为 123</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Double.parseDouble(String str)</code> 将字符串转换为双精度浮点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strDouble</span> <span class="operator">=</span> <span class="string">&quot;3.14&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> Double.parseDouble(strDouble); <span class="comment">// 结果为 3.14</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>String.valueOf(类型 value)</code> 将数值转换为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> String.valueOf(intValue); <span class="comment">// 结果为 &quot;42&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>或者直接使用数值类型的 <code>toString()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strDouble</span> <span class="operator">=</span> Double.toString(doubleValue); <span class="comment">// 结果为 &quot;3.14&quot;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>**注意！在进行字符串转换为数值时，要确保字符串的格式是合法的数值格式，否则可能会抛出 <code>NumberFormatException</code>**。</p></blockquote><p><strong>字符串和字符数组之间的转换</strong>：</p><ul><li><p>使用 <code>toCharArray()</code> 方法将字符串转换为字符数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] charArray = str.toCharArray(); <span class="comment">// 结果为 &#123;&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>String(char[] value)</code> 构造函数将字符数组转换为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray); <span class="comment">// 结果为 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>String.valueOf(char[] data)</code> 方法将字符数组转换为字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(charArray); <span class="comment">// 结果为 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>new String(char[] value, int offset, int count)</code> 构造函数可以指定字符数组的子串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray, <span class="number">1</span>, <span class="number">3</span>); <span class="comment">// 结果为 &quot;ell&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><p><code>StringBuffer</code> 是 Java 中表示可变字符串的类，与 <code>String</code> 不同，<code>StringBuffer</code> 的内容可以动态修改。这种可变性使得 <code>StringBuffer</code> 更适合<strong>频繁进行字符串操作</strong>的场景。</p><ol><li><p><strong>创建 StringBuffer 对象：</strong></p><ul><li><p>使用无参构造函数创建空的 <code>StringBuffer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用带容量参数的构造函数创建指定容量的 <code>StringBuffer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用字符串作为初始值创建 <code>StringBuffer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>获取容量和长度：</strong></p><ul><li><p>使用 <code>capacity()</code> 获取 <code>StringBuffer</code> 对象的总容量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">totalCapacity</span> <span class="operator">=</span> buffer1.capacity();</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>length()</code> 获取 <code>StringBuffer</code> 对象中字符串的长度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">currentLength</span> <span class="operator">=</span> buffer1.length();</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>追加字符串：</strong></p><ul><li>使用 <code>append(类型 s)</code> 在字符串末尾追加内容：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">buffer.append(<span class="string">&quot;, World!&quot;</span>); <span class="comment">// 结果为 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>插入字符串：</strong></p><ul><li>使用 <code>insert(int offset, 类型 s)</code> 在指定位置插入内容：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">buffer.insert(<span class="number">5</span>, <span class="string">&quot;, World!&quot;</span>); <span class="comment">// 结果为 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除字符或子串：</strong></p><ul><li><p>使用 <code>deleteCharAt(int index)</code> 删除指定位置的字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">buffer.deleteCharAt(<span class="number">5</span>); <span class="comment">// 结果为 &quot;HelloWorld!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>delete(int start, int end)</code> 删除指定范围的字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">buffer.delete(<span class="number">5</span>, <span class="number">13</span>); <span class="comment">// 结果为 &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>替换字符或子串：</strong></p><ul><li>使用 <code>replace(int start, int end, String str)</code> 替换指定范围的字符串：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello, Java!&quot;</span>);</span><br><span class="line">buffer.replace(<span class="number">7</span>, <span class="number">11</span>, <span class="string">&quot;World&quot;</span>); <span class="comment">// 结果为 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>反转字符串：</strong></p><ul><li>使用 <code>reverse()</code> 方法反转 <code>StringBuffer</code> 中的字符顺序：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">buffer.reverse(); <span class="comment">// 结果为 &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>获取子串：</strong></p><ul><li>使用 <code>substring(int start)</code> 或 <code>substring(int start, int end)</code> 获取子串：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">subString1</span> <span class="operator">=</span> buffer.substring(<span class="number">7</span>);      <span class="comment">// 返回 &quot;World!&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">subString2</span> <span class="operator">=</span> buffer.substring(<span class="number">0</span>, <span class="number">5</span>);  <span class="comment">// 返回 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>转换为 String：</strong></p><ul><li>使用 <code>toString()</code> 将 <code>StringBuffer</code> 对象转换为 <code>String</code> 对象：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> buffer.toString();</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><p>一维数组是一种基本的数据结构，用于存储相同数据类型的元素集合。在 Java 中，一维数组是对象，可以通过索引访问数组中的元素。</p><ol><li><p><strong>数组的声明和初始化：</strong></p><ul><li><p><strong>声明数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明整型数组</span></span><br><span class="line"><span class="type">int</span>[] intArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明字符串数组</span></span><br><span class="line">String[] stringArray;</span><br></pre></td></tr></table></figure></li><li><p><strong>初始化数组：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化整型数组</span></span><br><span class="line">intArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">// 创建长度为 5 的整型数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化字符串数组</span></span><br><span class="line">stringArray = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;;<span class="comment">// 注意，这里不能指定元素个数</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>访问数组元素：</strong></p><ul><li>使用索引访问数组元素，索引从 0 开始：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">firstElement</span> <span class="operator">=</span> numbers[<span class="number">0</span>]; <span class="comment">// 获取数组的第一个元素，值为 1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组的长度：</strong></p><ul><li>使用 <code>length</code> 属性获取数组的长度：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">arrayLength</span> <span class="operator">=</span> numbers.length; <span class="comment">// 获取数组的长度，值为 5</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>遍历数组：</strong></p><ul><li><p>使用循环遍历数组中的所有元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用增强型 for 循环（for-each）遍历数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组的初始化方式：</strong></p><ul><li><p><strong>动态初始化：</strong> 在声明数组的同时为其分配空间并指定长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] dynamicArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p><strong>静态初始化：</strong> 在声明数组的同时为其指定元素值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] staticArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>多维数组：</strong></p><ul><li>一维数组的元素可以是另一个一维数组，形成多维数组。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] twoDArray = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;<span class="comment">// 二维数组</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组的注意事项：</strong></p><ul><li>数组的索引越界：访问不存在的索引会导致 <code>ArrayIndexOutOfBoundsException</code>。</li><li>数组的长度不可变：<strong>一旦数组被创建，其长度不可改变</strong>。</li></ul></li></ol><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p><code>Arrays</code> 类是 Java 中用于操作数组的工具类，它提供了一系列静态方法，用于对数组进行排序、搜索、比较等操作。<code>Arrays</code> 类中的方法都是静态方法，直接通过类名调用即可。</p><p>以下是 <code>Arrays</code> 类的一些常用方法：</p><ol><li><p><strong>数组排序：</strong></p><ul><li><p>使用 <code>sort(类型[] array)</code> 方法对数组进行升序排序。对于对象数组，要求元素类型实现 <code>Comparable</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>&#125;;</span><br><span class="line">Arrays.sort(numbers); <span class="comment">// 结果为 &#123;1, 2, 5, 7, 8&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>sort(类型[] array, Comparator&lt;? super 类型&gt; comparator)</code> 方法进行自定义排序，要求提供一个比较器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;;</span><br><span class="line">Arrays.sort(names, Comparator.reverseOrder()); <span class="comment">// 结果为 &#123;&quot;John&quot;, &quot;Charlie&quot;, &quot;Bob&quot;, &quot;Alice&quot;&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组搜索：</strong></p><ul><li><p>使用 <code>binarySearch(类型[] array, 类型 key)</code> 方法在<strong>有序数组</strong>中进行二分查找。对于对象数组，要求元素类型实现 <code>Comparable</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">5</span>); <span class="comment">// 结果为 2</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>binarySearch(类型[] array, int fromIndex, int toIndex, 类型 key)</code> 在指定范围内进行二分查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(numbers, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 结果为 -3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组填充：</strong></p><ul><li><p>使用 <code>fill(类型[] array, 类型 value)</code> 方法将数组的所有元素填充为指定值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(numbers, <span class="number">42</span>); <span class="comment">// 结果为 &#123;42, 42, 42, 42, 42&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>fill(类型[] array, int fromIndex, int toIndex, 类型 value)</code> 在指定范围内填充数组元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(numbers, <span class="number">1</span>, <span class="number">4</span>, <span class="number">42</span>); <span class="comment">// 结果为 &#123;0, 42, 42, 42, 0&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组复制：</strong></p><ul><li><p>使用 <code>copyOf(类型[] original, int newLength)</code> 方法复制数组的一部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] source = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] destination = Arrays.copyOf(source, <span class="number">3</span>); <span class="comment">// 结果为 &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>copyOfRange(类型[] original, int from, int to)</code> 复制数组的指定范围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] source = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] destination = Arrays.copyOfRange(source, <span class="number">1</span>, <span class="number">4</span>); <span class="comment">// 结果为 &#123;2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组比较：</strong></p><ul><li><p>使用 <code>equals(类型[] a, 类型[] b)</code> 方法比较两个数组是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> Arrays.equals(arr1, arr2); <span class="comment">// 结果为 true</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>deepEquals(Object[] a1, Object[] a2)</code> 方法递归比较两个对象数组是否相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span>[][] arr2 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> Arrays.deepEquals(arr1, arr2); <span class="comment">// 结果为 true</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p>二维数组是一种特殊的数组，它可以看作是数组的数组。在 Java 中，二维数组是一个由行和列组成的表格状数据结构。</p><p>以下是关于二维数组的一些基本概念和操作：</p><ol><li><p><strong>定义和初始化：</strong></p><ul><li><p>定义二维数组的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型[][] 数组名 = new 数据类型[行数][列数];</span></span><br><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 3行4列的二维数组</span></span><br></pre></td></tr></table></figure></li><li><p>初始化二维数组时，可以同时指定元素的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>访问元素：</strong></p><ul><li>通过指定行和列的索引访问二维数组的元素：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> matrix[<span class="number">1</span>][<span class="number">2</span>]; <span class="comment">// 访问第2行第3列的元素，结果为 6</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>遍历二维数组：</strong></p><ul><li>使用嵌套循环遍历二维数组的所有元素：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">        System.out.print(matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>获取行数和列数：</strong></p><ul><li>使用 <code>length</code> 属性获取二维数组的行数和列数：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;    <span class="comment">// 获取行数，结果为 3</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columns</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length; <span class="comment">// 获取列数，结果为 3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>不规则二维数组：</strong></p><ul><li>二维数组的各行可以有不同的长度，创建不规则二维数组时，只需指定每行的长度即可：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] irregularMatrix = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用 Arrays 类操作二维数组：</strong></p><ul><li><p>使用 <code>Arrays.deepToString(Object[] array)</code> 方法可以方便地将二维数组转换为字符串，便于输出和调试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.deepToString(matrix));</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Arrays.copyOf</code> 或 <code>Arrays.copyOfRange</code> 可以复制部分或全部二维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] copyMatrix = Arrays.copyOf(matrix, matrix.length);</span><br><span class="line"><span class="type">int</span>[][] subMatrix = Arrays.copyOfRange(matrix, <span class="number">0</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>Arrays.fill(类型[] array, 类型 value)</code> 可以为二维数组的所有元素赋相同的值。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两整数之和</title>
      <link href="/2024/01/19/leetcode-371/"/>
      <url>/2024/01/19/leetcode-371/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/sum-of-two-integers/description/">371. 两整数之和 - 力扣（LeetCode）</a></p><p>给你两个整数 <code>a</code> 和 <code>b</code> ，<strong>不使用</strong> 运算符 <code>+</code> 和 <code>-</code> ，计算并返回两整数之和。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 1, b = 2</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 2, b = 3</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-1000 &lt;= a, b &lt;= 1000</code></li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>不使用<code>+</code>、<code>-</code>算术运算符，通过位运算可以实现加法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0+0=0，0+1=1，1+0=1，1+1=0（进位）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> (a &amp; b) &lt;&lt; <span class="number">1</span>; <span class="comment">// 计算所有需要进位的 bit</span></span><br><span class="line">            a ^= b; <span class="comment">// 异或操作，相当于无进位加法</span></span><br><span class="line">            b = carry; <span class="comment">// 将进位应用于下一位相加</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了位运算中的异或（<code>^</code>）和与（<code>&amp;</code>）操作来模拟不带进位的加法。</p><p>具体步骤如下：</p><ol><li><code>(a &amp; b) &lt;&lt; 1</code> 计算出所有需要进位的 <code>bit</code>，将其左移一位，得到进位值（因为只有<code>1</code>和<code>1</code>与运算之后才是<code>1</code>）。</li><li><code>a ^= b</code> 对 a 和 b 进行异或操作，相当于不考虑进位的加法。</li><li><code>b = carry</code> 将进位应用于下一轮相加。</li></ol><p>这样，通过循环，直到没有进位为止，最终得到了两数之和。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4的幂</title>
      <link href="/2024/01/19/leetcode-342/"/>
      <url>/2024/01/19/leetcode-342/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/power-of-four/description/">342. 4的幂 - 力扣（LeetCode）</a></p><p>给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>整数 <code>n</code> 是 4 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 4x</code></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 16</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= n &lt;= 2^31 - 1</code></li></ul><p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>在位运算章节中我们<a href="https://zheng-yi-yi.github.io/2024/01/16/dsa-01-Bit-operations/#%E5%88%A4%E6%96%AD%E7%BB%99%E5%AE%9A%E6%95%B0-n-%E6%98%AF%E5%90%A6%E4%B8%BA-2-%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0%E6%AC%A1%E5%B9%82">讲过</a>，要想判断给定数 <code>n</code> 是否为 <code>2</code> 的正整数次幂，只需这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，位运算技巧<code>n &amp; (n - 1)</code>可以直接将 <code>n</code> 二进制表示的最低位 <code>1</code> 移除。</p><p>现在，我们要来判断一个数<code>n</code>是否是 4 的幂次方。这该怎么算？</p><p>通过观察我们发现，如果<code>n</code>是 4 的幂，那么<code>n</code>的二进制表示中，<code>1</code>所在的位置一定是从低位开始的<strong>第偶数个</strong>二进制位上（注意，最低位规定是第<code>0</code>位）。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 4 = &#123;100&#125;</span><br><span class="line">16 = &#123;10000&#125;</span><br><span class="line">32 = &#123;1000000&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>因此，我们只需构造一个所有**偶数二进制位都是<code>0</code>**，奇数二进制位都是<code>1</code>的数字<code>mask</code>，然后将这个数字和<code>n</code>进行按位与运算。</p><p>如果结果是<code>0</code>，那么这个数<code>n</code>一定是 4 的幂次方（因为其二进制位中<code>1</code>出现的位置是偶数位）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mask = &#123;10101010101010101010101010101010&#125;2 = &#123;AAAAAAAA&#125;16</span><br></pre></td></tr></table></figure><p>解题代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfFour</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n-<span class="number">1</span>)) == <span class="number">0</span> &amp;&amp; (n &amp; <span class="number">0xaaaaaaaa</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字范围按位与</title>
      <link href="/2024/01/19/leetocde-201/"/>
      <url>/2024/01/19/leetocde-201/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/bitwise-and-of-numbers-range/description/">201. 数字范围按位与 - 力扣（LeetCode）</a></p><p>给你两个整数 <code>left</code> 和 <code>right</code> ，表示区间 <code>[left, right]</code> ，返回此区间内所有数字 <strong>按位与</strong> 的结果（包含 <code>left</code> 、<code>right</code> 端点）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left = 5, right = 7</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left = 0, right = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：left = 1, right = 2147483647</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= left &lt;= right &lt;= 2^31 - 1</code></li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>这道题如果按照迭代区间的每一个元素，然后按位进行与运算，会超时。因此需要优化。</p><p>我们观察发现，将每个数字用二进制表示后对齐，逐位遍历比特位上的值，只要某一列上出现一个<code>0</code>，那么<strong>与运算</strong>之后的结果在该位上也一定是<code>0</code>。</p><p><img src="/images/leetcode/leetocde-201.png" alt="leetocde-201.png"></p><p>因此，这个问题就转换为：给定两个整数，找到它们对应的二进制字符串的公共前缀，然后将剩余位补零。</p><p>在实际编码中，我们让两个数字不断右移，直到相等，就得到了公共前缀，此时再左移补零。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rangeBitwiseAnd</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left != right) &#123;</span><br><span class="line">            k++;</span><br><span class="line">            left &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            right &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left &lt;&lt; k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转矩阵后的得分</title>
      <link href="/2024/01/19/leetcode-861/"/>
      <url>/2024/01/19/leetcode-861/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/score-after-flipping-matrix/description/">861. 翻转矩阵后的得分 - 力扣（LeetCode）</a></p><p>给你一个大小为 <code>m x n</code> 的二元矩阵 <code>grid</code> ，矩阵中每个元素的值为 <code>0</code> 或 <code>1</code> 。</p><p>一次 <strong>移动</strong> 是指选择任一行或列，并转换该行或列中的每一个值：将所有 <code>0</code> 都更改为 <code>1</code>，将所有 <code>1</code> 都更改为 <code>0</code>。</p><p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的 <strong>得分</strong> 就是这些数字的总和。</p><p>在执行任意次 <strong>移动</strong> 后（含 0 次），返回可能的最高分数。</p><p><strong>示例 1：</strong></p><p><img src="/images/leetcode/leetcode-861.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]</span><br><span class="line">输出：39</span><br><span class="line">解释：0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[0]]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 20</code></li><li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>这道题使用了贪心策略。</p><p>首先我们知道，矩阵有<code>m</code>行<code>n</code>列。这里我们设首列（最左边的列）是第<code>0</code>列。</p><p>贪心思路是这样的：</p><ul><li>将首列全部变为<code>1</code>（为了得到最高的分数）</li><li>接着对于后续每一列，我们都让该列上<code>1</code>的数目尽可能的多（如果该列上<code>0</code>的数目多于<code>1</code>的数目，就翻转该列）</li></ul><p>在实际编码时，我们是这样实现的：</p><ol><li>首先，我们初始化结果变量<code>ret</code>为矩阵的行数<code>m</code>乘以2的n-1次方。因为我们首先将首列全部变为1嘛，而首列的权值是<code>2^(n-1)</code>。</li><li>接着，对于后续的每一列（从第一列开始遍历到最后一列）：<ol><li>我们统计当前列中<code>1</code>的数量以及<code>0</code>的数量。</li><li>然后取两者中较大的值，我们设为<code>k</code>，<code>k</code>就是翻转后<code>1</code>的数量。</li><li>然后将<code>k</code>乘以<code>2</code>的<code>n-j-1</code>次方，再累加到<code>ret</code>变量即可。</li></ol></li><li>最终将<code>ret</code>变量返回。</li></ol><blockquote><p>在计算每一列上<code>1</code>的数量时，我们是这么计算的：</p><ol><li>如果首列的元素是<code>1</code>，直接加上当前列的值</li><li>如果首列的元素是<code>0</code>，则需要加上当前列值为<code>0</code>的元素个数（这是因为首列元素为0，则需要翻转该行将首列元素变为<code>1</code>。那么该行上为<code>0</code>的元素翻转后就是<code>1</code>了）。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">matrixScore</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> m * (<span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j&lt;n; j++) &#123;  <span class="comment">// 遍历每一列 j</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nOnes</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;m; i++) &#123;  <span class="comment">// 遍历每一行 i</span></span><br><span class="line">                <span class="keyword">if</span>(grid[i][<span class="number">0</span>] == <span class="number">1</span>) nOnes+= grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> nOnes += (<span class="number">1</span> - grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> Math.max(nOnes, m-nOnes);</span><br><span class="line">            ret += k * (<span class="number">1</span>&lt;&lt;(n-j-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找到两个数组的前缀公共数组</title>
      <link href="/2024/01/18/leetcode-2657/"/>
      <url>/2024/01/18/leetcode-2657/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/find-the-prefix-common-array-of-two-arrays/description/">2657. 找到两个数组的前缀公共数组 - 力扣（LeetCode）</a></p><p>给你两个下标从 <strong>0</strong> 开始长度为 <code>n</code> 的整数排列 <code>A</code> 和 <code>B</code> 。</p><p><code>A</code> 和 <code>B</code> 的 <strong>前缀公共数组</strong> 定义为数组 <code>C</code> ，其中 <code>C[i]</code> 是数组 <code>A</code> 和 <code>B</code> 到下标为 <code>i</code> 之前公共元素的数目。</p><p>请你返回 <code>A</code> 和 <code>B</code> 的 <strong>前缀公共数组</strong> 。</p><p>如果一个长度为 <code>n</code> 的数组包含 <code>1</code> 到 <code>n</code> 的元素恰好一次，我们称这个数组是一个长度为 <code>n</code> 的 <strong>排列</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [1,3,2,4], B = [3,1,2,4]</span><br><span class="line">输出：[0,2,3,4]</span><br><span class="line">解释：i = 0：没有公共元素，所以 C[0] = 0 。</span><br><span class="line">i = 1：1 和 3 是两个数组的前缀公共元素，所以 C[1] = 2 。</span><br><span class="line">i = 2：1，2 和 3 是两个数组的前缀公共元素，所以 C[2] = 3 。</span><br><span class="line">i = 3：1，2，3 和 4 是两个数组的前缀公共元素，所以 C[3] = 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [2,3,1], B = [3,1,2]</span><br><span class="line">输出：[0,1,3]</span><br><span class="line">解释：i = 0：没有公共元素，所以 C[0] = 0 。</span><br><span class="line">i = 1：只有 3 是公共元素，所以 C[1] = 1 。</span><br><span class="line">i = 2：1，2 和 3 是两个数组的前缀公共元素，所以 C[2] = 3 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= A.length == B.length == n &lt;= 50</code></li><li><code>1 &lt;= A[i], B[i] &lt;= n</code></li><li>题目保证 <code>A</code> 和 <code>B</code> 两个数组都是 <code>n</code> 个元素的排列。</li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>首先我们观察到，两个数组都分别是整数<code>1</code>到<code>n</code>的排列（数组中各元素互不相同）。</p><p>解题思路：</p><p>设所求数组为<code>ans</code></p><p>从左到右遍历数组A和B，在每轮循环中：</p><ul><li>将<code>A[i]</code>和<code>B[i]</code>分别放入集合<code>A</code>以及集合<code>B</code></li><li>接着计算两个集合中相同元素的个数，将这个值赋给<code>ans[i]</code></li></ul><p>最后返回<code>ans</code>即可。</p><p>这里由于数组<code>A</code>和<code>B</code>的长度都不超过<code>50</code>，因此我们可以用位运算来优化操作。</p><p>用<code>mask</code>二进制位上的<code>1</code>和<code>0</code>来表示元素是否存在集合中，用 <code>&amp;</code> 运算求出集合的交集，最后按照二进制位中<code>1</code>的个数来表示交集元素的数目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findThePrefixCommonArray(<span class="type">int</span>[] A, <span class="type">int</span>[] B) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> A.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maska</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maskb</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">            <span class="comment">// 将元素所在的位置加入集合mask中</span></span><br><span class="line">            maska |= (<span class="number">1L</span> &lt;&lt; A[i]);</span><br><span class="line">            maskb |= (<span class="number">1L</span> &lt;&lt; B[i]);</span><br><span class="line"><span class="comment">// 求出两个集合的交集，并且数出1的数量</span></span><br><span class="line">            ans[i] = Long.bitCount(maska &amp; maskb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使数组异或和等于 K 的最少操作次数</title>
      <link href="/2024/01/17/leetcode-2997/"/>
      <url>/2024/01/17/leetcode-2997/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-make-array-xor-equal-to-k/description/">2997. 使数组异或和等于 K 的最少操作次数 - 力扣（LeetCode）</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个正整数 <code>k</code> 。</p><p>你可以对数组执行以下操作 <strong>任意次</strong> ：</p><ul><li>选择数组里的 <strong>任意</strong> 一个元素，并将它的 <strong>二进制</strong> 表示 <strong>翻转</strong> 一个数位，翻转数位表示将 <code>0</code> 变成 <code>1</code> 或者将 <code>1</code> 变成 <code>0</code> 。</li></ul><p>你的目标是让数组里 <strong>所有</strong> 元素的按位异或和得到 <code>k</code> ，请你返回达成这一目标的 <strong>最少</strong> 操作次数。</p><p><strong>注意</strong>，你也可以将一个数的前导 0 翻转。比方说，数字 <code>(101)2</code> 翻转第四个数位，得到 <code>(1101)2</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,1,3,4], k = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：我们可以执行以下操作：</span><br><span class="line">- 选择下标为 2 的元素，也就是 3 == (011)2 ，我们翻转第一个数位得到 (010)2 == 2 。数组变为 [2,1,2,4] 。</span><br><span class="line">- 选择下标为 0 的元素，也就是 2 == (010)2 ，我们翻转第三个数位得到 (110)2 == 6 。数组变为 [6,1,2,4] 。</span><br><span class="line">最终数组的所有元素异或和为 (6 XOR 1 XOR 2 XOR 4) == 1 == k 。</span><br><span class="line">无法用少于 2 次操作得到异或和等于 k 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,2,0], k = 0</span><br><span class="line">输出：0</span><br><span class="line">解释：数组所有元素的异或和为 (2 XOR 0 XOR 2 XOR 0) == 0 == k 。所以不需要进行任何操作。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^6</code></li><li><code>0 &lt;= k &lt;= 10^6</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>让数组<code>nums</code>里<strong>所有</strong>元素的按位异或后的结果，我们设为 <code>res</code>。</p><p><code>res</code>等于<code>k</code>，等价于二者异或后为0。因为对于异或操作来说，两个相同的数异或，结果为0。</p><p>因此我们可以让<code>res</code>和<code>k</code>进行异或得到<code>ans</code>，然后看看<code>ans</code>中有几个1，我们将这些1翻转为0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 计算给定数字的二进制表示形式中 1 的数量，也可以调用Integer.bitCount()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOneCount</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            n &amp;= n-<span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            res ^= x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> res ^ k;</span><br><span class="line">        <span class="keyword">return</span> getOneCount(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计一致字符串的数目</title>
      <link href="/2024/01/17/leetcode-1684/"/>
      <url>/2024/01/17/leetcode-1684/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/count-the-number-of-consistent-strings/description/">1684. 统计一致字符串的数目 - 力扣（LeetCode）</a></p><p>给定一个由不同字符组成的字符串 <code>allowed</code> 和一个字符串数组 <code>words</code>，如果一个字符串的每一个字符都在 <code>allowed</code> 中，就称这个字符串是一致字符串。请你返回 <code>words</code> 数组中一致字符串的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = &quot;ab&quot;, words = [&quot;ad&quot;,&quot;bd&quot;,&quot;aaab&quot;,&quot;baa&quot;,&quot;badab&quot;]</span><br><span class="line">输出：2</span><br><span class="line">解释：字符串 &quot;aaab&quot; 和 &quot;baa&quot; 都是一致字符串，因为它们只包含字符 &#x27;a&#x27; 和 &#x27;b&#x27; 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = &quot;abc&quot;, words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;bc&quot;,&quot;abc&quot;]</span><br><span class="line">输出：7</span><br><span class="line">解释：所有字符串都是一致的。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = &quot;cad&quot;, words = [&quot;cc&quot;,&quot;acd&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bac&quot;,&quot;bad&quot;,&quot;ac&quot;,&quot;d&quot;]</span><br><span class="line">输出：4</span><br><span class="line">解释：字符串 &quot;cc&quot;，&quot;acd&quot;，&quot;ac&quot; 和 &quot;d&quot; 是一致字符串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 10^4</code></li><li><code>1 &lt;= allowed.length &lt;= 26</code></li><li><code>1 &lt;= words[i].length &lt;= 10</code></li><li><code>allowed</code> 中的字符 <strong>互不相同</strong> 。</li><li><code>words[i]</code> 和 <code>allowed</code> 只包含小写英文字母。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countConsistentStrings</span><span class="params">(String allowed, String[] words)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="字符集合的位表示"><a href="#字符集合的位表示" class="headerlink" title="字符集合的位表示"></a>字符集合的位表示</h2><p>由于题目中说明字符串仅包含小写字母，我们可以使用位运算来表示字符串的字母集合。</p><p>通过一个 32 位整数<code>mask</code>来表示一个字符串的字母集合，其中每一位表示一个字母是否出现（如果一个字母出现了，那么将对应整数的位设1，否则就是0）。</p><h2 id="构建-allowed-的字母集合-mask"><a href="#构建-allowed-的字母集合-mask" class="headerlink" title="构建 allowed 的字母集合 mask"></a>构建 allowed 的字母集合 mask</h2><p>首先，我们需要构建字符串 <code>allowed</code> 中出现的字母集合 <code>mask</code>。遍历 <code>allowed</code> 中的每个字符，将对应字母的二进制位置设为 1，得到一个整数 <code>mask</code>，表示 <code>allowed</code> 中出现的字母集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allowed.length(); i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> allowed.charAt(i);</span><br><span class="line">    mask |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历-words-数组，统计一致字符串的数目"><a href="#遍历-words-数组，统计一致字符串的数目" class="headerlink" title="遍历 words 数组，统计一致字符串的数目"></a>遍历 words 数组，统计一致字符串的数目</h2><p>然后，我们遍历 <code>words</code> 数组，对于每个字符串 <code>word</code>，构建其字母集合 <code>mask1</code>，并通过 <code>(mask1 | mask) == mask</code> 判断 <code>mask1</code> 是否是 <code>mask</code> 的子集，如果是，则说明该字符串是一致字符串，将结果 <code>res</code> 增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mask1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        mask1 |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((mask1 | mask) == mask) &#123;</span><br><span class="line">        res++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，返回统计得到的一致字符串的数目。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 获取字符串的字母集合 mask</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMask</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            mask |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计一致字符串的数目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countConsistentStrings</span><span class="params">(String allowed, String[] words)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建 allowed 的字母集合 allowedMask</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">allowedMask</span> <span class="operator">=</span> getMask(allowed);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> words.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 words 数组，统计一致字符串的数目</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前字符串的字母集合 curMask</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">curMask</span> <span class="operator">=</span> getMask(words[i]);</span><br><span class="line">            <span class="comment">// 判断 curMask 是否是 allowedMask 的子集</span></span><br><span class="line">            <span class="keyword">if</span> ((allowedMask | curMask) == allowedMask) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一致字符串的数目</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作后的最大异或和</title>
      <link href="/2024/01/17/leetcode-2317/"/>
      <url>/2024/01/17/leetcode-2317/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/maximum-xor-after-operations/">2317. 操作后的最大异或和 - 力扣（LeetCode）</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。一次操作中，选择 <strong>任意</strong> 非负整数 <code>x</code> 和一个下标 <code>i</code> ，<strong>更新</strong> <code>nums[i]</code> 为 <code>nums[i] AND (nums[i] XOR x)</code> 。</p><p>注意，<code>AND</code> 是逐位与运算，<code>XOR</code> 是逐位异或运算。</p><p>请你执行 <strong>任意次</strong> 更新操作，并返回 <code>nums</code> 中所有元素 <strong>最大</strong> 逐位异或和。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4,6]</span><br><span class="line">输出：7</span><br><span class="line">解释：选择 x = 4 和 i = 3 进行操作，num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2 。</span><br><span class="line">现在，nums = [3, 2, 4, 2] 且所有元素逐位异或得到 3 XOR 2 XOR 4 XOR 2 = 7 。</span><br><span class="line">可知 7 是能得到的最大逐位异或和。</span><br><span class="line">注意，其他操作可能也能得到逐位异或和 7 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,9,2]</span><br><span class="line">输出：11</span><br><span class="line">解释：执行 0 次操作。</span><br><span class="line">所有元素的逐位异或和为 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11 。</span><br><span class="line">可知 11 是能得到的最大逐位异或和。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^8</code></li></ul><hr><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>这道题有点脑筋急转弯的感觉。</p><p>要想获得<strong>最大逐位异或和</strong>（我们设为<code>ans</code>），就必须尽可能的保留更多异或后的1的个数。</p><p>我们再来看这个运算操作：<code>nums[i] AND (nums[i] XOR x)</code></p><p>实际上：</p><ul><li><code>nums[i] XOR x</code>等同于将<code>nums[i]</code>修改为任意非负整数。</li><li><code>num[i] AND ???</code> 等同于修改<code>nums[i]</code>的某些比特位（由1修改为0）</li></ul><p>由于我们想要<strong>尽可能的保留更多异或后的1的个数</strong>。因此必须使得二进制位上<code>1</code>的个数要是奇数。因此<code>nums[i] AND (nums[i] XOR x)</code>操作就是将某些比特位上的<code>1</code>修改为<code>0</code>，从而使得该位上的<code>1</code>是奇数个，最终异或结果里该位上才是<code>1</code>。</p><p>因此我们发现，这道题目要求的最大逐位异或和，实际上等价于对数组中每个元素的所有二进制位，只要某一位在数组中出现过 <code>1</code>，那么答案里这一位也是 <code>1</code>，得到的结果才达到最大。</p><p>因此我们可以用逐位<strong>或</strong>运算来尽最大努力保留每一位上的<code>1</code>。</p><p>代码很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumXOR</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums) &#123;</span><br><span class="line">            ans = i | ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2024/01/16/dsa-01-Bit-operations/"/>
      <url>/2024/01/16/dsa-01-Bit-operations/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">位运算符</a></li><li><a href="#%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97">移位运算</a></li></ul></li><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C">位运算操作</a><ul><li><a href="#%E5%88%A4%E6%96%AD%E7%BB%99%E5%AE%9A%E6%95%B0-n-%E6%98%AF%E5%90%A6%E4%B8%BA-2-%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0%E6%AC%A1%E5%B9%82">判断给定数 n 是否为 2 的正整数次幂</a></li><li><a href="#%E8%AE%A1%E7%AE%97%E7%BB%99%E5%AE%9A%E6%95%B0%E5%AD%97%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E5%BD%A2%E5%BC%8F%E4%B8%AD-1-%E7%9A%84%E6%95%B0%E9%87%8F">计算给定数字的二进制表示形式中 1 的数量</a></li><li><a href="#%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E4%B8%AD%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E5%AD%90%E9%9B%86">生成一个集合中所有可能的子集</a></li><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E9%81%8D%E5%8E%86">位运算遍历</a></li><li><a href="#%E5%8F%96%E5%87%BA%E6%95%B4%E6%95%B0-n-%E5%9C%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%8B%E7%9A%84%E7%AC%AC-k-%E4%BD%8D">取出整数 n 在二进制表示下的第 k 位</a></li><li><a href="#%E5%B0%86%E6%95%B4%E6%95%B0-n-%E5%9C%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%8B%E7%9A%84%E7%AC%AC-k-%E4%BD%8D%E5%8F%96%E5%8F%8D">将整数 n 在二进制表示下的第 k 位取反</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%95%B4%E6%95%B0%E7%9A%84%E4%BD%8E%E4%BD%8D%E9%83%A8%E5%88%86">获取整数的低位部分</a></li><li><a href="#%E4%BD%8D%E8%B5%8B%E5%80%BC1%E6%93%8D%E4%BD%9C">位赋值1操作</a></li><li><a href="#%E4%BD%8D%E8%B5%8B%E5%80%BC0%E6%93%8D%E4%BD%9C">位赋值0操作</a></li><li><a href="#%E6%88%90%E5%AF%B9%E5%8F%98%E6%8D%A2">成对变换</a></li><li><a href="#%E8%BF%94%E5%9B%9E%E6%95%B4%E6%95%B0-n-%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E5%BD%A2%E5%BC%8F%E4%B8%AD%E6%9C%80%E5%8F%B3%E8%BE%B9%E7%9A%841">返回整数 n 的二进制表示形式中最右边的1</a></li></ul></li><li><a href="#%E5%86%8D%E8%B0%88%E5%BC%82%E6%88%96">再谈异或</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97">基本运算</a></li><li><a href="#%E6%9F%90%E4%B8%AA%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A5%87%E6%95%B0%E6%AC%A1">某个数出现奇数次</a></li><li><a href="#%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A5%87%E6%95%B0%E6%AC%A1">两个数出现奇数次</a></li><li><a href="#%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B0">交换两个数</a></li></ul></li><li><a href="#%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99">学习资料</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><strong>Powers of Two</strong></p></blockquote><img src="/2024/01/16/dsa-01-Bit-operations/powersoftwo.png" class="" title="powersoftwo"><blockquote><p><strong>Logical</strong></p></blockquote><img src="/2024/01/16/dsa-01-Bit-operations/logical.png" class="" title="logical"><blockquote><p><strong>Bit Manipulation</strong></p></blockquote><img src="/2024/01/16/dsa-01-Bit-operations/bitmanipulation.png" class="" title="bitmanipulation"><blockquote><p><strong>Mask Creation</strong></p></blockquote><img src="/2024/01/16/dsa-01-Bit-operations/mask.png" class="" title="mask"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>“bit是度量信息的单位，包含 0 和 1 两种状态。计算机的各种运算最后无不归结为一个个bit的变化。”</p></blockquote><p>位运算速度更快，更接近系统，有时可以将程序优化到一个很好的水平。</p><p>我们约定，在 <code>m</code> 位二进制数中，最低位称为第 <code>0</code> 位，从右到左依次类推，则最高位是第 <code>m-1</code> 位。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>下面，复习一下位运算符：</p><table><thead><tr><th>与</th><th>或</th><th>非</th><th>异或</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td><code>|</code></td><td><code>~</code></td><td><code>^</code></td></tr><tr><td>如果相对应位都是1，则结果为1，否则为0</td><td>如果相对应位都是 0，则结果为 0，否则为 1</td><td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0</td><td>如果相对应位值不同，则结果为1，否则为0</td></tr></tbody></table><img src="/2024/01/16/dsa-01-Bit-operations/image.png" class="" title="位运算符"><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerFunctions</span> &#123;</span><br><span class="line">    <span class="comment">// 计算 n 乘以 2 的 m 次方</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">multiplyByPowerOfTwo</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;&lt; m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 n 除以 2 的 m 次方</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divideByPowerOfTwo</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt;&gt; m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 示例用法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resultMultiply</span> <span class="operator">=</span> multiplyByPowerOfTwo(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 5 * 2^3 = 40</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resultDivide</span> <span class="operator">=</span> divideByPowerOfTwo(<span class="number">32</span>, <span class="number">3</span>);    <span class="comment">// 32 / 2^3 = 4</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;5 * 2^3 = &quot;</span> + resultMultiply);</span><br><span class="line">        System.out.println(<span class="string">&quot;32 / 2^3 = &quot;</span> + resultDivide);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 * 2^3 = 40</span><br><span class="line">32 / 2^3 = 4</span><br></pre></td></tr></table></figure><blockquote><p><strong>左移，在二进制表示下把数字同时向左移动，低位用 0 填充，高位越界后舍弃</strong>。</p></blockquote><p>将一个数左移 <code>n</code> 位，相当于乘上 <code>2</code> 的 <code>n</code> 次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">7</span>&lt;&lt;<span class="number">3</span>);  <span class="comment">// 56，即 7 * (2^3)</span></span><br></pre></td></tr></table></figure><p>将 <code>1</code> 左移 <code>n</code> 位后得到的值等于 <code>2</code> 的 <code>n</code> 次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span>&lt;&lt;<span class="number">10</span>);  <span class="comment">// 1024，即2的10次方</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>右移，在二进制表示下把数字同时向右移动，高位以符号位填充，低位越界后舍弃</strong>。</p></blockquote><p>将某个数右移 <code>1</code> 位相当于除以 <code>2</code> 再向下取整。</p><p>比如 <code>3&gt;&gt;1</code> 相当于 <code>3</code> 除以 <code>2</code> 等于 <code>1.5</code> 再向下取整得到 <code>1</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">3</span>&gt;&gt;<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>-3&gt;&gt;1</code> 相当于 <code>-3</code> 除以 <code>2</code> 等于 <code>-1.5</code> 再向下取整得到 <code>-2</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">3</span>&gt;&gt;<span class="number">1</span>); <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>值得一提的是，在Java中，“整数&#x2F;2”会舍弃小数位。比如 <code>-3/2</code> 的结果为 -1</strong>。这和右移操作（除以2后向下取整）的结果不一样，存在区别。</p></blockquote><p>将一个数右移 <code>n</code> 位，相当于乘以 <code>2</code> 的 <code>n</code> 次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">64</span>&gt;&gt;<span class="number">3</span>);  <span class="comment">// 8，即 64 / (2^3)</span></span><br></pre></td></tr></table></figure><h1 id="位运算操作"><a href="#位运算操作" class="headerlink" title="位运算操作"></a>位运算操作</h1><h2 id="判断给定数-n-是否为-2-的正整数次幂"><a href="#判断给定数-n-是否为-2-的正整数次幂" class="headerlink" title="判断给定数 n 是否为 2 的正整数次幂"></a>判断给定数 n 是否为 2 的正整数次幂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>n</code> 是 <code>2</code> 的幂，则 <code>n &amp; (n-1)</code> 的结果应为 <code>0</code>。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   x  = 4 = (0100)2</span><br><span class="line">  x-1 = 3 = (0011)2</span><br><span class="line"></span><br><span class="line">   0 1 0 0      4</span><br><span class="line">&amp;  0 0 1 1      3</span><br><span class="line">-----------</span><br><span class="line">   0 0 0 0      0</span><br></pre></td></tr></table></figure><h2 id="计算给定数字的二进制表示形式中-1-的数量"><a href="#计算给定数字的二进制表示形式中-1-的数量" class="headerlink" title="计算给定数字的二进制表示形式中 1 的数量"></a>计算给定数字的二进制表示形式中 1 的数量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count_one</span> <span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        n = n &amp; (n-<span class="number">1</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环体内，执行位操作 <code>n = n &amp; (n-1)</code>，这会将 <code>n</code> 减去其二进制表示中最低位的 <code>1</code>。这一步目的是消除<code>n</code>最右边的 <code>1</code>，并在每次迭代中计算 <code>1</code> 的数量。</p><p>可以列举后理解。比如要求出<code>14</code>（<code>1110</code>）的二进制表示形式中 <code>1</code> 的数量，那么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">14 &amp; 13 = &#123;1 1 1 0&#125; &amp; &#123;1 1 0 1&#125; = &#123;1 1 0 0&#125; = 12</span><br><span class="line"></span><br><span class="line">12 &amp; 11 = &#123;1 1 0 0&#125; &amp; &#123;1 0 1 1&#125; = &#123;1 0 0 0&#125; = 8</span><br><span class="line"></span><br><span class="line"> 8 &amp; 7  = &#123;1 0 0 0&#125; &amp; &#123;0 1 1 1&#125; = &#123;0 0 0 0&#125; = 0</span><br></pre></td></tr></table></figure><p>一共循环3次，1 的数量为<code>3</code>。我们发现，每次执行<code>n = n &amp; (n-1)</code>操作后，都会消除其二进制表示中最右边的 <code>1</code>。</p><h2 id="生成一个集合中所有可能的子集"><a href="#生成一个集合中所有可能的子集" class="headerlink" title="生成一个集合中所有可能的子集"></a>生成一个集合中所有可能的子集</h2><p>比如有一个集合<code>A</code>是<code>&#123;a, b, c&#125;</code>。</p><p>为了求出所有可能的子集，我们需要<code>3</code>位二进制数。并且约定<code>1</code>表示对应的元素存在于子集中，<code>0</code>表示对应的元素不存在于子集中。所有可能的组合如下：</p><ul><li><code>0 = (000) = &#123;&#125;</code></li><li><code>1 = (001) = &#123;c&#125;</code></li><li><code>2 = (010) = &#123;b&#125;</code></li><li><code>3 = (011) = &#123;b, c&#125;</code></li><li><code>4 = (100) = &#123;a&#125;</code></li><li><code>5 = (101) = &#123;a, c&#125;</code></li><li><code>6 = (110) = &#123;a, b&#125;</code></li><li><code>7 = (111) = &#123;a, b, c&#125;</code></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">possibleSubsets</span> <span class="params">(<span class="type">char</span> A[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> A.length;   <span class="comment">// 有N个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历 2^n 次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;N); ++i) &#123;</span><br><span class="line">        <span class="comment">// 从最低位开始，检查每一位是否为 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;N; ++j) &#123; </span><br><span class="line">            <span class="keyword">if</span>((i &amp; (<span class="number">1</span> &lt;&lt; j)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果当前这个二进制位是1，则将对应的元素加入子集</span></span><br><span class="line">                System.out.print(A[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算遍历"><a href="#位运算遍历" class="headerlink" title="位运算遍历"></a>位运算遍历</h2><p>使用 <code>n &amp; 1</code> 可以获取 <code>n</code> 在二进制表示下的最低位，而 <code>n &gt;&gt; 1</code> 可以舍去最低位，也就是将整数右移一位。结合这两个操作，可以<strong>逐位遍历</strong>整数 <code>n</code> 在二进制表示下的所有位，实现位运算遍历。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历整数 n 的二进制表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitTraversalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">// 二进制表示为 1011</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从最低位开始遍历</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lowestBit</span> <span class="operator">=</span> n &amp; <span class="number">1</span>;</span><br><span class="line">            System.out.print(lowestBit); <span class="comment">// 输出当前位的值</span></span><br><span class="line"></span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>; <span class="comment">// 右移一位，舍去最低位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，遍历过程输出的结果是 <code>1101</code>，即整数<code>11</code>在二进制下的各个位的值。</p><blockquote><p><strong>注意，由于是从最低位开始遍历，输出的结果是二进制表示的反向</strong>。</p></blockquote><p>如果你想要正向输出，可以将结果保存在数组或其他数据结构中，然后反向输出。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历整数 n 的二进制表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitTraversalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">// 二进制表示为 1011</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从最低位开始遍历</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lowestBit</span> <span class="operator">=</span> n &amp; <span class="number">1</span>;</span><br><span class="line">            result.insert(<span class="number">0</span>, lowestBit); <span class="comment">// 插入到result的最前面</span></span><br><span class="line"></span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>; <span class="comment">// 右移一位，舍去最低位（也可以写成 n &gt;&gt;= 1）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;正向输出二进制表示: &quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正向输出二进制表示: 1011</span></span><br></pre></td></tr></table></figure><h2 id="取出整数-n-在二进制表示下的第-k-位"><a href="#取出整数-n-在二进制表示下的第-k-位" class="headerlink" title="取出整数 n 在二进制表示下的第 k 位"></a>取出整数 n 在二进制表示下的第 k 位</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出整数 n 在二进制表示下的第 k 位的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBit</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; k) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们要判断某个数<code>n</code>某一位是1还是0（二进制表示下），可以将这个数<code>n</code>右移 <code>k</code> 位再和<code>1</code>进行<strong>与</strong>运算即可。</p><h2 id="将整数-n-在二进制表示下的第-k-位取反"><a href="#将整数-n-在二进制表示下的第-k-位取反" class="headerlink" title="将整数 n 在二进制表示下的第 k 位取反"></a>将整数 n 在二进制表示下的第 k 位取反</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把整数 n 在二进制表示下的第 k 位取反</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">flipBit</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n ^ (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>1</code>左移<code>k</code>位得到的数值为<code>2</code>的<code>k</code>次幂，该数值在二进制表示下，只有第<code>k</code>位为<code>1</code>，其他位都为<code>0</code>。因此将这个数和<code>n</code>进行异或运算，即可将第 k 位取反。</p><blockquote><p><code>1^1=0，1^0=1</code></p></blockquote><p>比如，现在要将<code>6</code>（<code>0 1 1 0</code>）的第<code>3</code>位取反后变为<code>14</code>（<code>1 1 1 0</code>）。那么只需将<code>1</code>左移<code>3</code>位得到<code>8</code>（<code>1 0 0 0</code>），再和<code>8</code>和<code>6</code>进行异或，就可以得到<code>14</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 6 = &#123;0 1 1 0&#125;</span><br><span class="line"> 8 = &#123;1 0 0 0&#125;</span><br><span class="line">14 = &#123;1 1 1 0&#125;</span><br></pre></td></tr></table></figure><h2 id="获取整数的低位部分"><a href="#获取整数的低位部分" class="headerlink" title="获取整数的低位部分"></a>获取整数的低位部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出整数 n 在二进制表示下的第 0 到 k-1 位（后 k 位）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBits</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，现在要拿到<code>5</code>的后<code>2</code>位。只需将<code>1</code>左移<code>2</code>位得到<code>4</code>，再将<code>4</code>减<code>1</code>得到<code>3</code>，再拿<code>3</code>和<code>5</code>进行<strong>与运算</strong>即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 = &#123;0 1 0 1&#125;</span><br><span class="line">3 = &#123;0 0 1 1&#125;</span><br><span class="line">1 = &#123;0 0 0 1&#125;</span><br></pre></td></tr></table></figure><h2 id="位赋值1操作"><a href="#位赋值1操作" class="headerlink" title="位赋值1操作"></a>位赋值1操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToOne</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n | (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToOne</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n | (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">8</span>;  <span class="comment">// 二进制表示为 1000</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 将第0位赋值为1（也就是将&quot;1000&quot;变为&quot;1001&quot;，即9）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setBitToOne(n, k);</span><br><span class="line">        System.out.println(result);<span class="comment">// 9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位赋值0操作"><a href="#位赋值0操作" class="headerlink" title="位赋值0操作"></a>位赋值0操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToZero</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; (~(<span class="number">1</span> &lt;&lt; k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToZero</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; (~(<span class="number">1</span> &lt;&lt; k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 二进制表示为 1010</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 将第1位赋值为0（也就是将&quot;1010&quot;变为&quot;1000&quot;，即8）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setBitToZero(n, k);</span><br><span class="line">        System.out.println(result);<span class="comment">// 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成对变换"><a href="#成对变换" class="headerlink" title="成对变换"></a>成对变换</h2><p>通过计算可以发现，对于非负整数 <code>n</code>：</p><ol><li>当 <code>n</code> 为<strong>偶数</strong>时：</li></ol><ul><li><code>n ^ 1</code> 等于 <code>n + 1</code>。</li><li>比如 <code>n = 2</code>，<code>2 ^ 1</code> 等于 <code>3</code>。</li></ul><ol><li>当 <code>n</code> 为<strong>奇数</strong>时：</li></ol><ul><li><code>n ^ 1</code> 等于 <code>n - 1</code>。</li><li>比如 <code>n = 3</code>，<code>3 ^ 1</code> 等于 <code>2</code>。</li></ul><p>因此，<code>&quot;0与1&quot;</code>，<code>&quot;2与3&quot;</code>，<code>&quot;4与5&quot;</code>……关于<code>^ 1</code>运算构成 “成对变换”。这种成对的变换性质在涉及到奇偶性质的问题中或者某些特殊情境下会派上用场。</p><h2 id="返回整数-n-的二进制表示形式中最右边的1"><a href="#返回整数-n-的二进制表示形式中最右边的1" class="headerlink" title="返回整数 n 的二进制表示形式中最右边的1"></a>返回整数 n 的二进制表示形式中最右边的1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回整数 n 的二进制表示形式中，最右边的1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRightmostSetBit</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在补码表示法中，负数的表示是其正数的补码，即取反加一。</p></blockquote><p>我们来举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   n     = &#123;1 0 1 0&#125; =  10</span><br><span class="line">  -n     = &#123;0 1 1 0&#125; = -10</span><br><span class="line">n &amp; (-n) = &#123;0 0 1 0&#125; =  2</span><br></pre></td></tr></table></figure><h1 id="再谈异或"><a href="#再谈异或" class="headerlink" title="再谈异或"></a>再谈异或</h1><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><blockquote><p>异或运算，相同位为0，不同位为1。</p></blockquote><p>首先，在异或运算中，对于任意二进制位<code>x</code>：</p><ul><li><code>x ^ 0 = x</code></li><li><code>x ^ 1 = ~x</code></li></ul><h2 id="某个数出现奇数次"><a href="#某个数出现奇数次" class="headerlink" title="某个数出现奇数次"></a>某个数出现奇数次</h2><p>对于任意整数 <code>a</code>，有以下性质：</p><p><code>a^a=0</code></p><p>这表示一个数与自身进行异或运算的结果为零。</p><p>因此，如果对相同的数进行两次异或运算：</p><p><code>a^a^a=a^(a^a)=a^0=a</code></p><p>同样的:</p><p><code>a^b^b=a^(b^b)=a^0=a</code></p><p>因此，如果一个集合中某个数出现奇数次，其他数都出现偶数次，那么可以用异或算法，求出这个<strong>出现奇数次</strong>的数字：</p><blockquote><p>异或相同的数两次会互相抵消</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printOddTimesNum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">eO</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">eO ^= cur;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(eO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个数出现奇数次"><a href="#两个数出现奇数次" class="headerlink" title="两个数出现奇数次"></a>两个数出现奇数次</h2><p>现在又有一道<a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/description/">题目</a>：</p><p>如果一个集合中 <code>a</code> 出现了奇数次，<code>b</code> 也出现了奇数次，其他数字都出现了偶数次，那么求出 <code>a</code> 和 <code>b</code> 是多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printOddTimesNum2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">eor ^= cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时 eor = a ^ b</span></span><br><span class="line"><span class="comment">// 下面这个 rightOne 代表取出 eor 中最右侧为 1 的数，比如 1011010 取出后就等于 0000010 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> eor &amp; (~eor + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 下面以 rightOne 为分界线，分出哪些是 a 这边区域的，哪些是 b这边区域的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line"><span class="keyword">if</span> ((cur &amp; rightOne) != <span class="number">0</span>) &#123;</span><br><span class="line">ans ^= cur;<span class="comment">// 最后异或完的结果 ans 不是 a 就是 b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">other</span> <span class="operator">=</span> eor ^ ans;</span><br><span class="line">System.out.println(ans + <span class="string">&quot; &quot;</span> + other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路：</p><ul><li>通过异或操作，可以将数组中所有出现偶数次的数互相抵消，最终得到的结果<code>eor</code>就是两个出现奇数次的数的异或结果<code>a^b</code>。</li><li>然后，通过找到异或结果<code>a^b</code>中的一个为<code>1</code>的位，**将数组中的数分为两组，分别包含 <code>a</code> 和 <code>b</code>**（这一步很关键，就是找到一个分界线，这个分界线可以取 <code>eor</code> 上的最右侧位数为 <code>1</code> 的数字）。</li><li>最后再对这两组数分别执行异或运算，得到 <code>a</code> 和 <code>b</code>。</li></ul><h2 id="交换两个数"><a href="#交换两个数" class="headerlink" title="交换两个数"></a>交换两个数</h2><p>我们再来看异或运算的另一个技巧，<strong>交换两个数</strong>：</p><img src="/2024/01/16/dsa-01-Bit-operations/swapNumbers.png" class="" title="swapNumbers"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] swapNumbers(<span class="type">int</span>[] A) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上呢，这道题就是经典的异或运算特性题。解题代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异或运算：相同为 0，不同为 1。还可以理解为无进位加一，比如1+0=1、1+1=0(注意不进位)</span></span><br><span class="line"><span class="comment"> * 性质：</span></span><br><span class="line"><span class="comment"> * 0 ^ N = N </span></span><br><span class="line"><span class="comment"> * N ^ N = 0</span></span><br><span class="line"><span class="comment"> * a ^ b = b ^ a</span></span><br><span class="line"><span class="comment"> * a ^ b ^ c = a ^ (b ^ c)</span></span><br><span class="line"><span class="comment"> * 基于以上性质，我们来理解一下这个swapNumbers函数的运行过程：</span></span><br><span class="line"><span class="comment"> * a: 甲</span></span><br><span class="line"><span class="comment"> * b: 乙</span></span><br><span class="line"><span class="comment"> * a = a ^ b→a: 甲 ^ 乙    b: 乙</span></span><br><span class="line"><span class="comment"> * b = a ^ b→a: 甲 ^ 乙    b: 甲 ^ 乙 ^ 乙 = 甲</span></span><br><span class="line"><span class="comment"> * a = a ^ b→a: 甲 ^ 乙 ^ 甲 = 乙    b: 甲</span></span><br><span class="line"><span class="comment"> * a: 乙</span></span><br><span class="line"><span class="comment"> * b: 甲</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] swapNumbers(<span class="type">int</span>[] A) &#123;</span><br><span class="line">        A[<span class="number">0</span>] = A[<span class="number">0</span>] ^ A[<span class="number">1</span>];</span><br><span class="line">        A[<span class="number">1</span>] = A[<span class="number">0</span>] ^ A[<span class="number">1</span>];</span><br><span class="line">        A[<span class="number">0</span>] = A[<span class="number">0</span>] ^ A[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h1><p>灵神：<a href="https://leetcode.cn/circle/discuss/CaOJ45/">分享｜从集合论到位运算，常见位运算技巧分类总结！ - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法竞赛 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/16/hello-world/"/>
      <url>/2024/01/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
