<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找到两个数组的前缀公共数组</title>
      <link href="/2024/01/18/leetcode-2657/"/>
      <url>/2024/01/18/leetcode-2657/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/find-the-prefix-common-array-of-two-arrays/description/">2657. 找到两个数组的前缀公共数组 - 力扣（LeetCode）</a></p><p>给你两个下标从 <strong>0</strong> 开始长度为 <code>n</code> 的整数排列 <code>A</code> 和 <code>B</code> 。</p><p><code>A</code> 和 <code>B</code> 的 <strong>前缀公共数组</strong> 定义为数组 <code>C</code> ，其中 <code>C[i]</code> 是数组 <code>A</code> 和 <code>B</code> 到下标为 <code>i</code> 之前公共元素的数目。</p><p>请你返回 <code>A</code> 和 <code>B</code> 的 <strong>前缀公共数组</strong> 。</p><p>如果一个长度为 <code>n</code> 的数组包含 <code>1</code> 到 <code>n</code> 的元素恰好一次，我们称这个数组是一个长度为 <code>n</code> 的 <strong>排列</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [1,3,2,4], B = [3,1,2,4]</span><br><span class="line">输出：[0,2,3,4]</span><br><span class="line">解释：i = 0：没有公共元素，所以 C[0] = 0 。</span><br><span class="line">i = 1：1 和 3 是两个数组的前缀公共元素，所以 C[1] = 2 。</span><br><span class="line">i = 2：1，2 和 3 是两个数组的前缀公共元素，所以 C[2] = 3 。</span><br><span class="line">i = 3：1，2，3 和 4 是两个数组的前缀公共元素，所以 C[3] = 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：A = [2,3,1], B = [3,1,2]</span><br><span class="line">输出：[0,1,3]</span><br><span class="line">解释：i = 0：没有公共元素，所以 C[0] = 0 。</span><br><span class="line">i = 1：只有 3 是公共元素，所以 C[1] = 1 。</span><br><span class="line">i = 2：1，2 和 3 是两个数组的前缀公共元素，所以 C[2] = 3 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= A.length == B.length == n &lt;= 50</code></li><li><code>1 &lt;= A[i], B[i] &lt;= n</code></li><li>题目保证 <code>A</code> 和 <code>B</code> 两个数组都是 <code>n</code> 个元素的排列。</li></ul><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>首先我们观察到，两个数组都分别是整数<code>1</code>到<code>n</code>的排列（数组中各元素互不相同）。</p><p>解题思路：</p><p>设所求数组为<code>ans</code></p><p>从左到右遍历数组A和B，在每轮循环中：</p><ul><li>将<code>A[i]</code>和<code>B[i]</code>分别放入集合<code>A</code>以及集合<code>B</code></li><li>接着计算两个集合中相同元素的个数，将这个值赋给<code>ans[i]</code></li></ul><p>最后返回<code>ans</code>即可。</p><p>这里由于数组<code>A</code>和<code>B</code>的长度都不超过<code>50</code>，因此我们可以用位运算来优化操作。</p><p>用<code>mask</code>二进制位上的<code>1</code>和<code>0</code>来表示元素是否存在集合中，用 <code>&amp;</code> 运算求出集合的交集，最后按照二进制位中<code>1</code>的个数来表示交集元素的数目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findThePrefixCommonArray(<span class="type">int</span>[] A, <span class="type">int</span>[] B) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> A.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maska</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">maskb</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">            <span class="comment">// 将元素所在的位置加入集合mask中</span></span><br><span class="line">            maska |= (<span class="number">1L</span> &lt;&lt; A[i]);</span><br><span class="line">            maskb |= (<span class="number">1L</span> &lt;&lt; B[i]);</span><br><span class="line"><span class="comment">// 求出两个集合的交集，并且数出1的数量</span></span><br><span class="line">            ans[i] = Long.bitCount(maska &amp; maskb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使数组异或和等于 K 的最少操作次数</title>
      <link href="/2024/01/17/leetcode-2997/"/>
      <url>/2024/01/17/leetcode-2997/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-make-array-xor-equal-to-k/description/">2997. 使数组异或和等于 K 的最少操作次数 - 力扣（LeetCode）</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个正整数 <code>k</code> 。</p><p>你可以对数组执行以下操作 <strong>任意次</strong> ：</p><ul><li>选择数组里的 <strong>任意</strong> 一个元素，并将它的 <strong>二进制</strong> 表示 <strong>翻转</strong> 一个数位，翻转数位表示将 <code>0</code> 变成 <code>1</code> 或者将 <code>1</code> 变成 <code>0</code> 。</li></ul><p>你的目标是让数组里 <strong>所有</strong> 元素的按位异或和得到 <code>k</code> ，请你返回达成这一目标的 <strong>最少</strong> 操作次数。</p><p><strong>注意</strong>，你也可以将一个数的前导 0 翻转。比方说，数字 <code>(101)2</code> 翻转第四个数位，得到 <code>(1101)2</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,1,3,4], k = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：我们可以执行以下操作：</span><br><span class="line">- 选择下标为 2 的元素，也就是 3 == (011)2 ，我们翻转第一个数位得到 (010)2 == 2 。数组变为 [2,1,2,4] 。</span><br><span class="line">- 选择下标为 0 的元素，也就是 2 == (010)2 ，我们翻转第三个数位得到 (110)2 == 6 。数组变为 [6,1,2,4] 。</span><br><span class="line">最终数组的所有元素异或和为 (6 XOR 1 XOR 2 XOR 4) == 1 == k 。</span><br><span class="line">无法用少于 2 次操作得到异或和等于 k 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,2,0], k = 0</span><br><span class="line">输出：0</span><br><span class="line">解释：数组所有元素的异或和为 (2 XOR 0 XOR 2 XOR 0) == 0 == k 。所以不需要进行任何操作。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^6</code></li><li><code>0 &lt;= k &lt;= 10^6</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>让数组<code>nums</code>里<strong>所有</strong>元素的按位异或后的结果，我们设为 <code>res</code>。</p><p><code>res</code>等于<code>k</code>，等价于二者异或后为0。因为对于异或操作来说，两个相同的数异或，结果为0。</p><p>因此我们可以让<code>res</code>和<code>k</code>进行异或得到<code>ans</code>，然后看看<code>ans</code>中有几个1，我们将这些1翻转为0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 计算给定数字的二进制表示形式中 1 的数量，也可以调用Integer.bitCount()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOneCount</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            n &amp;= n-<span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            res ^= x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> res ^ k;</span><br><span class="line">        <span class="keyword">return</span> getOneCount(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计一致字符串的数目</title>
      <link href="/2024/01/17/leetcode-1684/"/>
      <url>/2024/01/17/leetcode-1684/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/count-the-number-of-consistent-strings/description/">1684. 统计一致字符串的数目 - 力扣（LeetCode）</a></p><p>给定一个由不同字符组成的字符串 <code>allowed</code> 和一个字符串数组 <code>words</code>，如果一个字符串的每一个字符都在 <code>allowed</code> 中，就称这个字符串是一致字符串。请你返回 <code>words</code> 数组中一致字符串的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = &quot;ab&quot;, words = [&quot;ad&quot;,&quot;bd&quot;,&quot;aaab&quot;,&quot;baa&quot;,&quot;badab&quot;]</span><br><span class="line">输出：2</span><br><span class="line">解释：字符串 &quot;aaab&quot; 和 &quot;baa&quot; 都是一致字符串，因为它们只包含字符 &#x27;a&#x27; 和 &#x27;b&#x27; 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = &quot;abc&quot;, words = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;ab&quot;,&quot;ac&quot;,&quot;bc&quot;,&quot;abc&quot;]</span><br><span class="line">输出：7</span><br><span class="line">解释：所有字符串都是一致的。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：allowed = &quot;cad&quot;, words = [&quot;cc&quot;,&quot;acd&quot;,&quot;b&quot;,&quot;ba&quot;,&quot;bac&quot;,&quot;bad&quot;,&quot;ac&quot;,&quot;d&quot;]</span><br><span class="line">输出：4</span><br><span class="line">解释：字符串 &quot;cc&quot;，&quot;acd&quot;，&quot;ac&quot; 和 &quot;d&quot; 是一致字符串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 10^4</code></li><li><code>1 &lt;= allowed.length &lt;= 26</code></li><li><code>1 &lt;= words[i].length &lt;= 10</code></li><li><code>allowed</code> 中的字符 <strong>互不相同</strong> 。</li><li><code>words[i]</code> 和 <code>allowed</code> 只包含小写英文字母。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countConsistentStrings</span><span class="params">(String allowed, String[] words)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="字符集合的位表示"><a href="#字符集合的位表示" class="headerlink" title="字符集合的位表示"></a>字符集合的位表示</h2><p>由于题目中说明字符串仅包含小写字母，我们可以使用位运算来表示字符串的字母集合。</p><p>通过一个 32 位整数<code>mask</code>来表示一个字符串的字母集合，其中每一位表示一个字母是否出现（如果一个字母出现了，那么将对应整数的位设1，否则就是0）。</p><h2 id="构建-allowed-的字母集合-mask"><a href="#构建-allowed-的字母集合-mask" class="headerlink" title="构建 allowed 的字母集合 mask"></a>构建 allowed 的字母集合 mask</h2><p>首先，我们需要构建字符串 <code>allowed</code> 中出现的字母集合 <code>mask</code>。遍历 <code>allowed</code> 中的每个字符，将对应字母的二进制位置设为 1，得到一个整数 <code>mask</code>，表示 <code>allowed</code> 中出现的字母集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allowed.length(); i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> allowed.charAt(i);</span><br><span class="line">    mask |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历-words-数组，统计一致字符串的数目"><a href="#遍历-words-数组，统计一致字符串的数目" class="headerlink" title="遍历 words 数组，统计一致字符串的数目"></a>遍历 words 数组，统计一致字符串的数目</h2><p>然后，我们遍历 <code>words</code> 数组，对于每个字符串 <code>word</code>，构建其字母集合 <code>mask1</code>，并通过 <code>(mask1 | mask) == mask</code> 判断 <code>mask1</code> 是否是 <code>mask</code> 的子集，如果是，则说明该字符串是一致字符串，将结果 <code>res</code> 增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mask1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">        mask1 |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((mask1 | mask) == mask) &#123;</span><br><span class="line">        res++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，返回统计得到的一致字符串的数目。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 获取字符串的字母集合 mask</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMask</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            mask |= <span class="number">1</span> &lt;&lt; (c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计一致字符串的数目</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countConsistentStrings</span><span class="params">(String allowed, String[] words)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建 allowed 的字母集合 allowedMask</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">allowedMask</span> <span class="operator">=</span> getMask(allowed);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> words.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 words 数组，统计一致字符串的数目</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前字符串的字母集合 curMask</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">curMask</span> <span class="operator">=</span> getMask(words[i]);</span><br><span class="line">            <span class="comment">// 判断 curMask 是否是 allowedMask 的子集</span></span><br><span class="line">            <span class="keyword">if</span> ((allowedMask | curMask) == allowedMask) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一致字符串的数目</span></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作后的最大异或和</title>
      <link href="/2024/01/17/leetcode-2317/"/>
      <url>/2024/01/17/leetcode-2317/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/maximum-xor-after-operations/">2317. 操作后的最大异或和 - 力扣（LeetCode）</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。一次操作中，选择 <strong>任意</strong> 非负整数 <code>x</code> 和一个下标 <code>i</code> ，<strong>更新</strong> <code>nums[i]</code> 为 <code>nums[i] AND (nums[i] XOR x)</code> 。</p><p>注意，<code>AND</code> 是逐位与运算，<code>XOR</code> 是逐位异或运算。</p><p>请你执行 <strong>任意次</strong> 更新操作，并返回 <code>nums</code> 中所有元素 <strong>最大</strong> 逐位异或和。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4,6]</span><br><span class="line">输出：7</span><br><span class="line">解释：选择 x = 4 和 i = 3 进行操作，num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2 。</span><br><span class="line">现在，nums = [3, 2, 4, 2] 且所有元素逐位异或得到 3 XOR 2 XOR 4 XOR 2 = 7 。</span><br><span class="line">可知 7 是能得到的最大逐位异或和。</span><br><span class="line">注意，其他操作可能也能得到逐位异或和 7 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,9,2]</span><br><span class="line">输出：11</span><br><span class="line">解释：执行 0 次操作。</span><br><span class="line">所有元素的逐位异或和为 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11 。</span><br><span class="line">可知 11 是能得到的最大逐位异或和。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^8</code></li></ul><hr><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>这道题有点脑筋急转弯的感觉。</p><p>要想获得<strong>最大逐位异或和</strong>（我们设为<code>ans</code>），就必须尽可能的保留更多异或后的1的个数。</p><p>我们再来看这个运算操作：<code>nums[i] AND (nums[i] XOR x)</code></p><p>实际上：</p><ul><li><code>nums[i] XOR x</code>等同于将<code>nums[i]</code>修改为任意非负整数。</li><li><code>num[i] AND ???</code> 等同于修改<code>nums[i]</code>的某些比特位（由1修改为0）</li></ul><p>由于我们想要<strong>尽可能的保留更多异或后的1的个数</strong>。因此必须使得二进制位上<code>1</code>的个数要是奇数。因此<code>nums[i] AND (nums[i] XOR x)</code>操作就是将某些比特位上的<code>1</code>修改为<code>0</code>，从而使得该位上的<code>1</code>是奇数个，最终异或结果里该位上才是<code>1</code>。</p><p>因此我们发现，这道题目要求的最大逐位异或和，实际上等价于对数组中每个元素的所有二进制位，只要某一位在数组中出现过 <code>1</code>，那么答案里这一位也是 <code>1</code>，得到的结果才达到最大。</p><p>因此我们可以用逐位<strong>或</strong>运算来尽最大努力保留每一位上的<code>1</code>。</p><p>代码很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumXOR</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums) &#123;</span><br><span class="line">            ans = i | ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2024/01/16/dsa-01-Bit-operations/"/>
      <url>/2024/01/16/dsa-01-Bit-operations/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">位运算符</a></li><li><a href="#%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97">移位运算</a></li></ul></li><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E6%93%8D%E4%BD%9C">位运算操作</a><ul><li><a href="#%E5%88%A4%E6%96%AD%E7%BB%99%E5%AE%9A%E6%95%B0-n-%E6%98%AF%E5%90%A6%E4%B8%BA-2-%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0%E6%AC%A1%E5%B9%82">判断给定数 n 是否为 2 的正整数次幂</a></li><li><a href="#%E8%AE%A1%E7%AE%97%E7%BB%99%E5%AE%9A%E6%95%B0%E5%AD%97%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E5%BD%A2%E5%BC%8F%E4%B8%AD-1-%E7%9A%84%E6%95%B0%E9%87%8F">计算给定数字的二进制表示形式中 1 的数量</a></li><li><a href="#%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E4%B8%AD%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E5%AD%90%E9%9B%86">生成一个集合中所有可能的子集</a></li><li><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97%E9%81%8D%E5%8E%86">位运算遍历</a></li><li><a href="#%E5%8F%96%E5%87%BA%E6%95%B4%E6%95%B0-n-%E5%9C%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%8B%E7%9A%84%E7%AC%AC-k-%E4%BD%8D">取出整数 n 在二进制表示下的第 k 位</a></li><li><a href="#%E5%B0%86%E6%95%B4%E6%95%B0-n-%E5%9C%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%8B%E7%9A%84%E7%AC%AC-k-%E4%BD%8D%E5%8F%96%E5%8F%8D">将整数 n 在二进制表示下的第 k 位取反</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%95%B4%E6%95%B0%E7%9A%84%E4%BD%8E%E4%BD%8D%E9%83%A8%E5%88%86">获取整数的低位部分</a></li><li><a href="#%E4%BD%8D%E8%B5%8B%E5%80%BC1%E6%93%8D%E4%BD%9C">位赋值1操作</a></li><li><a href="#%E4%BD%8D%E8%B5%8B%E5%80%BC0%E6%93%8D%E4%BD%9C">位赋值0操作</a></li><li><a href="#%E6%88%90%E5%AF%B9%E5%8F%98%E6%8D%A2">成对变换</a></li><li><a href="#%E8%BF%94%E5%9B%9E%E6%95%B4%E6%95%B0-n-%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E5%BD%A2%E5%BC%8F%E4%B8%AD%E6%9C%80%E5%8F%B3%E8%BE%B9%E7%9A%841">返回整数 n 的二进制表示形式中，最右边的1</a></li></ul></li><li><a href="#%E5%86%8D%E8%B0%88%E5%BC%82%E6%88%96">再谈异或</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>“bit是度量信息的单位，包含 0 和 1 两种状态。计算机的各种运算最后无不归结为一个个bit的变化。”</p></blockquote><p>位运算速度更快，更接近系统，有时可以将程序优化到一个很好的水平。</p><p>我们约定，在 <code>m</code> 位二进制数中，最低位称为第 <code>0</code> 位，从右到左依次类推，则最高位是第 <code>m-1</code> 位。</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>下面，复习一下位运算符：</p><table><thead><tr><th>与</th><th>或</th><th>非</th><th>异或</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td><code>|</code></td><td><code>~</code></td><td><code>^</code></td></tr><tr><td>如果相对应位都是1，则结果为1，否则为0</td><td>如果相对应位都是 0，则结果为 0，否则为 1</td><td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0</td><td>如果相对应位值不同，则结果为1，否则为0</td></tr></tbody></table><img src="/2024/01/16/dsa-01-Bit-operations/image.png" class="" title="位运算符"><h2 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerFunctions</span> &#123;</span><br><span class="line">    <span class="comment">// 计算 n 乘以 2 的 m 次方</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">multiplyByPowerOfTwo</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;&lt; m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 n 除以 2 的 m 次方</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divideByPowerOfTwo</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt;&gt; m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 示例用法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resultMultiply</span> <span class="operator">=</span> multiplyByPowerOfTwo(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 5 * 2^3 = 40</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resultDivide</span> <span class="operator">=</span> divideByPowerOfTwo(<span class="number">32</span>, <span class="number">3</span>);    <span class="comment">// 32 / 2^3 = 4</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;5 * 2^3 = &quot;</span> + resultMultiply);</span><br><span class="line">        System.out.println(<span class="string">&quot;32 / 2^3 = &quot;</span> + resultDivide);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 * 2^3 = 40</span><br><span class="line">32 / 2^3 = 4</span><br></pre></td></tr></table></figure><blockquote><p><strong>左移，在二进制表示下把数字同时向左移动，低位用 0 填充，高位越界后舍弃</strong>。</p></blockquote><p>将一个数左移 <code>n</code> 位，相当于乘上 <code>2</code> 的 <code>n</code> 次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">7</span>&lt;&lt;<span class="number">3</span>);  <span class="comment">// 56，即 7 * (2^3)</span></span><br></pre></td></tr></table></figure><p>将 <code>1</code> 左移 <code>n</code> 位后得到的值等于 <code>2</code> 的 <code>n</code> 次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span>&lt;&lt;<span class="number">10</span>);  <span class="comment">// 1024，即2的10次方</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>右移，在二进制表示下把数字同时向右移动，高位以符号位填充，低位越界后舍弃</strong>。</p></blockquote><p>将某个数右移 <code>1</code> 位相当于除以 <code>2</code> 再向下取整。</p><p>比如 <code>3&gt;&gt;1</code> 相当于 <code>3</code> 除以 <code>2</code> 等于 <code>1.5</code> 再向下取整得到 <code>1</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">3</span>&gt;&gt;<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>-3&gt;&gt;1</code> 相当于 <code>-3</code> 除以 <code>2</code> 等于 <code>-1.5</code> 再向下取整得到 <code>-2</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">3</span>&gt;&gt;<span class="number">1</span>); <span class="comment">// -2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>值得一提的是，在Java中，“整数&#x2F;2”会舍弃小数位。比如 <code>-3/2</code> 的结果为 -1</strong>。这和右移操作（除以2后向下取整）的结果不一样，存在区别。</p></blockquote><p>将一个数右移 <code>n</code> 位，相当于乘以 <code>2</code> 的 <code>n</code> 次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">64</span>&gt;&gt;<span class="number">3</span>);  <span class="comment">// 8，即 64 / (2^3)</span></span><br></pre></td></tr></table></figure><h1 id="位运算操作"><a href="#位运算操作" class="headerlink" title="位运算操作"></a>位运算操作</h1><h2 id="判断给定数-n-是否为-2-的正整数次幂"><a href="#判断给定数-n-是否为-2-的正整数次幂" class="headerlink" title="判断给定数 n 是否为 2 的正整数次幂"></a>判断给定数 n 是否为 2 的正整数次幂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>n</code> 是 <code>2</code> 的幂，则 <code>n &amp; (n-1)</code> 的结果应为 <code>0</code>。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   x  = 4 = (0100)2</span><br><span class="line">  x-1 = 3 = (0011)2</span><br><span class="line"></span><br><span class="line">   0 1 0 0      4</span><br><span class="line">&amp;  0 0 1 1      3</span><br><span class="line">-----------</span><br><span class="line">   0 0 0 0      0</span><br></pre></td></tr></table></figure><h2 id="计算给定数字的二进制表示形式中-1-的数量"><a href="#计算给定数字的二进制表示形式中-1-的数量" class="headerlink" title="计算给定数字的二进制表示形式中 1 的数量"></a>计算给定数字的二进制表示形式中 1 的数量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count_one</span> <span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        n = n &amp; (n-<span class="number">1</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在循环体内，执行位操作 <code>n = n &amp; (n-1)</code>，这会将 <code>n</code> 减去其二进制表示中最低位的 <code>1</code>。这一步目的是消除<code>n</code>最右边的 <code>1</code>，并在每次迭代中计算 <code>1</code> 的数量。</p><p>可以列举后理解。比如要求出<code>14</code>（<code>1110</code>）的二进制表示形式中 <code>1</code> 的数量，那么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">14 &amp; 13 = &#123;1 1 1 0&#125; &amp; &#123;1 1 0 1&#125; = &#123;1 1 0 0&#125; = 12</span><br><span class="line"></span><br><span class="line">12 &amp; 11 = &#123;1 1 0 0&#125; &amp; &#123;1 0 1 1&#125; = &#123;1 0 0 0&#125; = 8</span><br><span class="line"></span><br><span class="line"> 8 &amp; 7  = &#123;1 0 0 0&#125; &amp; &#123;0 1 1 1&#125; = &#123;0 0 0 0&#125; = 0</span><br></pre></td></tr></table></figure><p>一共循环3次，1 的数量为<code>3</code>。我们发现，每次执行<code>n = n &amp; (n-1)</code>操作后，都会消除其二进制表示中最右边的 <code>1</code>。</p><h2 id="生成一个集合中所有可能的子集"><a href="#生成一个集合中所有可能的子集" class="headerlink" title="生成一个集合中所有可能的子集"></a>生成一个集合中所有可能的子集</h2><p>比如有一个集合<code>A</code>是<code>&#123;a, b, c&#125;</code>。</p><p>为了求出所有可能的子集，我们需要<code>3</code>位二进制数。并且约定<code>1</code>表示对应的元素存在于子集中，<code>0</code>表示对应的元素不存在于子集中。所有可能的组合如下：</p><ul><li><code>0 = (000) = &#123;&#125;</code></li><li><code>1 = (001) = &#123;c&#125;</code></li><li><code>2 = (010) = &#123;b&#125;</code></li><li><code>3 = (011) = &#123;b, c&#125;</code></li><li><code>4 = (100) = &#123;a&#125;</code></li><li><code>5 = (101) = &#123;a, c&#125;</code></li><li><code>6 = (110) = &#123;a, b&#125;</code></li><li><code>7 = (111) = &#123;a, b, c&#125;</code></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">possibleSubsets</span> <span class="params">(<span class="type">char</span> A[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> A.length;   <span class="comment">// 有N个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历 2^n 次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;N); ++i) &#123;</span><br><span class="line">        <span class="comment">// 从最低位开始，检查每一位是否为 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;N; ++j) &#123; </span><br><span class="line">            <span class="keyword">if</span>((i &amp; (<span class="number">1</span> &lt;&lt; j)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果当前这个二进制位是1，则将对应的元素加入子集</span></span><br><span class="line">                System.out.print(A[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算遍历"><a href="#位运算遍历" class="headerlink" title="位运算遍历"></a>位运算遍历</h2><p>使用 <code>n &amp; 1</code> 可以获取 <code>n</code> 在二进制表示下的最低位，而 <code>n &gt;&gt; 1</code> 可以舍去最低位，也就是将整数右移一位。结合这两个操作，可以<strong>逐位遍历</strong>整数 <code>n</code> 在二进制表示下的所有位，实现位运算遍历。</p><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历整数 n 的二进制表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitTraversalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">// 二进制表示为 1011</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从最低位开始遍历</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lowestBit</span> <span class="operator">=</span> n &amp; <span class="number">1</span>;</span><br><span class="line">            System.out.print(lowestBit); <span class="comment">// 输出当前位的值</span></span><br><span class="line"></span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>; <span class="comment">// 右移一位，舍去最低位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，遍历过程输出的结果是 <code>1101</code>，即整数<code>11</code>在二进制下的各个位的值。</p><blockquote><p><strong>注意，由于是从最低位开始遍历，输出的结果是二进制表示的反向</strong>。</p></blockquote><p>如果你想要正向输出，可以将结果保存在数组或其他数据结构中，然后反向输出。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历整数 n 的二进制表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitTraversalExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">// 二进制表示为 1011</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从最低位开始遍历</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lowestBit</span> <span class="operator">=</span> n &amp; <span class="number">1</span>;</span><br><span class="line">            result.insert(<span class="number">0</span>, lowestBit); <span class="comment">// 插入到result的最前面</span></span><br><span class="line"></span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>; <span class="comment">// 右移一位，舍去最低位（也可以写成 n &gt;&gt;= 1）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;正向输出二进制表示: &quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正向输出二进制表示: 1011</span></span><br></pre></td></tr></table></figure><h2 id="取出整数-n-在二进制表示下的第-k-位"><a href="#取出整数-n-在二进制表示下的第-k-位" class="headerlink" title="取出整数 n 在二进制表示下的第 k 位"></a>取出整数 n 在二进制表示下的第 k 位</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出整数 n 在二进制表示下的第 k 位的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBit</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; k) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们要判断某个数<code>n</code>某一位是1还是0（二进制表示下），可以将这个数<code>n</code>右移 <code>k</code> 位再和<code>1</code>进行<strong>与</strong>运算即可。</p><h2 id="将整数-n-在二进制表示下的第-k-位取反"><a href="#将整数-n-在二进制表示下的第-k-位取反" class="headerlink" title="将整数 n 在二进制表示下的第 k 位取反"></a>将整数 n 在二进制表示下的第 k 位取反</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把整数 n 在二进制表示下的第 k 位取反</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">flipBit</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n ^ (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>1</code>左移<code>k</code>位得到的数值为<code>2</code>的<code>k</code>次幂，该数值在二进制表示下，只有第<code>k</code>位为<code>1</code>，其他位都为<code>0</code>。因此将这个数和<code>n</code>进行异或运算，即可将第 k 位取反。</p><blockquote><p><code>1^1=0，1^0=1</code></p></blockquote><p>比如，现在要将<code>6</code>（<code>0 1 1 0</code>）的第<code>3</code>位取反后变为<code>14</code>（<code>1 1 1 0</code>）。那么只需将<code>1</code>左移<code>3</code>位得到<code>8</code>（<code>1 0 0 0</code>），再和<code>8</code>和<code>6</code>进行异或，就可以得到<code>14</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 6 = &#123;0 1 1 0&#125;</span><br><span class="line"> 8 = &#123;1 0 0 0&#125;</span><br><span class="line">14 = &#123;1 1 1 0&#125;</span><br></pre></td></tr></table></figure><h2 id="获取整数的低位部分"><a href="#获取整数的低位部分" class="headerlink" title="获取整数的低位部分"></a>获取整数的低位部分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出整数 n 在二进制表示下的第 0 到 k-1 位（后 k 位）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBits</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，现在要拿到<code>5</code>的后<code>2</code>位。只需将<code>1</code>左移<code>2</code>位得到<code>4</code>，再将<code>4</code>减<code>1</code>得到<code>3</code>，再拿<code>3</code>和<code>5</code>进行<strong>与运算</strong>即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 = &#123;0 1 0 1&#125;</span><br><span class="line">3 = &#123;0 0 1 1&#125;</span><br><span class="line">1 = &#123;0 0 0 1&#125;</span><br></pre></td></tr></table></figure><h2 id="位赋值1操作"><a href="#位赋值1操作" class="headerlink" title="位赋值1操作"></a>位赋值1操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToOne</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n | (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToOne</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n | (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">8</span>;  <span class="comment">// 二进制表示为 1000</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 将第0位赋值为1（也就是将&quot;1000&quot;变为&quot;1001&quot;，即9）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setBitToOne(n, k);</span><br><span class="line">        System.out.println(result);<span class="comment">// 9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位赋值0操作"><a href="#位赋值0操作" class="headerlink" title="位赋值0操作"></a>位赋值0操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToZero</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; (~(<span class="number">1</span> &lt;&lt; k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="comment">// 对整数 n 在二进制表示下表示的第 k 位赋值 0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setBitToZero</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; (~(<span class="number">1</span> &lt;&lt; k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 二进制表示为 1010</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 将第1位赋值为0（也就是将&quot;1010&quot;变为&quot;1000&quot;，即8）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> setBitToZero(n, k);</span><br><span class="line">        System.out.println(result);<span class="comment">// 8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成对变换"><a href="#成对变换" class="headerlink" title="成对变换"></a>成对变换</h2><p>通过计算可以发现，对于非负整数 <code>n</code>：</p><ol><li>当 <code>n</code> 为<strong>偶数</strong>时：</li></ol><ul><li><code>n ^ 1</code> 等于 <code>n + 1</code>。</li><li>比如 <code>n = 2</code>，<code>2 ^ 1</code> 等于 <code>3</code>。</li></ul><ol><li>当 <code>n</code> 为<strong>奇数</strong>时：</li></ol><ul><li><code>n ^ 1</code> 等于 <code>n - 1</code>。</li><li>比如 <code>n = 3</code>，<code>3 ^ 1</code> 等于 <code>2</code>。</li></ul><p>因此，<code>&quot;0与1&quot;</code>，<code>&quot;2与3&quot;</code>，<code>&quot;4与5&quot;</code>……关于<code>^ 1</code>运算构成 “成对变换”。这种成对的变换性质在涉及到奇偶性质的问题中或者某些特殊情境下会派上用场。</p><h2 id="返回整数-n-的二进制表示形式中，最右边的1"><a href="#返回整数-n-的二进制表示形式中，最右边的1" class="headerlink" title="返回整数 n 的二进制表示形式中，最右边的1"></a>返回整数 n 的二进制表示形式中，最右边的1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回整数 n 的二进制表示形式中，最右边的1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRightmostSetBit</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在补码表示法中，负数的表示是其正数的补码，即取反加一。</p></blockquote><p>我们来举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   n     = &#123;1 0 1 0&#125; =  10</span><br><span class="line">  -n     = &#123;0 1 1 0&#125; = -10</span><br><span class="line">n &amp; (-n) = &#123;0 0 1 0&#125; =  2</span><br></pre></td></tr></table></figure><h1 id="再谈异或"><a href="#再谈异或" class="headerlink" title="再谈异或"></a>再谈异或</h1><p>异或运算，相同位为0，不同位为1。</p><p>对于任意整数 <code>a</code>，有以下性质：</p><p><code>a^a=0</code></p><p>这表示一个数与自身进行异或运算的结果为零。</p><p>因此，如果对相同的数进行两次异或运算：</p><p><code>a^a^a=a^(a^a)=a^0=a</code></p><p>同样的:</p><p><code>a^b^b=a^(b^b)=a^0=a</code></p><p>因此，如果一个集合中某个数出现奇数次，其他数都出现偶数次，那么可以用异或算法，求出这个<strong>出现奇数次</strong>的数字：</p><blockquote><p>异或相同的数两次会互相抵消</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printOddTimesNum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">eO</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">eO ^= cur;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(eO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在又有一道题目：</p><p>如果一个集合中 <code>a</code> 出现了奇数次，<code>b</code> 也出现了奇数次，其他数字都出现了偶数次，那么求出 <code>a</code> 和 <code>b</code> 是多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printOddTimesNum2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line">eor ^= cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时 eor = a ^ b</span></span><br><span class="line"><span class="comment">// 下面这个 rightOne 代表取出 eor 中最右侧为 1 的数，比如 1011010 取出后就等于 0000010 </span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> eor &amp; (~eor + <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 下面以 rightOne 为分界线，分出哪些是 a 这边区域的，哪些是 b这边区域的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> cur : arr) &#123;</span><br><span class="line"><span class="keyword">if</span> ((cur &amp; rightOne) != <span class="number">0</span>) &#123;</span><br><span class="line">ans ^= cur;<span class="comment">// 最后异或完的结果 ans 不是 a 就是 b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">other</span> <span class="operator">=</span> eor ^ ans;</span><br><span class="line">System.out.println(ans + <span class="string">&quot; &quot;</span> + other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路：</p><ul><li>通过异或操作，可以将数组中所有出现偶数次的数互相抵消，最终得到的结果<code>eor</code>就是两个出现奇数次的数的异或结果<code>a^b</code>。</li><li>然后，通过找到异或结果<code>a^b</code>中的一个为<code>1</code>的位，**将数组中的数分为两组，分别包含 <code>a</code> 和 <code>b</code>**（这一步很关键，就是找到一个分界线，这个分界线可以取 <code>eor</code> 上的最右侧位数为 <code>1</code> 的数字）。</li><li>最后再对这两组数分别执行异或运算，得到 <code>a</code> 和 <code>b</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法竞赛 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/16/hello-world/"/>
      <url>/2024/01/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
